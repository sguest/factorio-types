// Factorio event definitions
// Factorio API reference https://lua-api.factorio.com/latest/index.html
// Generated from JSON source https://lua-api.factorio.com/latest/runtime-api.json
// Definition source https://github.com/sguest/factorio-types
// Factorio version 1.1.71
// API version 3

/**
 * Base type for all events
 * @remarks
 * Not a member of the factorio API, added to type definitions for ease of use
 *
 */
interface event  {
    /**
     * Identifier of the event
     */
    name: defines.events
    /**
     * Tick the event was generated.
     */
    tick: number
}
/**
 * Called when a {@link CustomInput | https://wiki.factorio.com/Prototype/CustomInput} is activated.
 */
interface CustomInputEvent extends event  {
    /**
     * The mouse cursor position when the custom input was activated.
     */
    cursor_position: MapPosition
    /**
     * The prototype name of the custom input that was activated.
     */
    input_name: string
    /**
     * The player that activated the custom input.
     */
    player_index: number
    /**
     * Information about the prototype that is selected when the custom input is used. Needs to be enabled on the custom input's prototype. `nil` if none is selected.
     */
    selected_prototype?: SelectedPrototypeData
}
/**
 * Called when a unit/group completes a command.
 */
interface on_ai_command_completed extends event  {
    result: defines.behavior_result
    /**
     * unit_number/group_number of the unit/group which just completed a command.
     */
    unit_number: number
    /**
     * Was this command generated by a distraction.
     */
    was_distracted: boolean
}
/**
 * Called when an area of the map is cloned.
 */
interface on_area_cloned extends event  {
    clear_destination_decoratives: boolean
    clear_destination_entities: boolean
    clone_decoratives: boolean
    clone_entities: boolean
    clone_tiles: boolean
    destination_area: BoundingBox
    destination_force?: LuaForce
    destination_surface: LuaSurface
    source_area: BoundingBox
    source_surface: LuaSurface
}
/**
 * Called when a biter migration builds a base.
 * @remarks
 * This will be called multiple times for each migration, once for every biter that is sacrificed to build part of the new base.
 *
 */
interface on_biter_base_built extends event  {
    /**
     * The entity that was built.
     */
    entity: LuaEntity
}
/**
 * Called when a set of positions on the map is cloned.
 */
interface on_brush_cloned extends event  {
    clear_destination_decoratives: boolean
    clear_destination_entities: boolean
    clone_decoratives: boolean
    clone_entities: boolean
    clone_tiles: boolean
    destination_force?: LuaForce
    destination_offset: TilePosition
    destination_surface: LuaSurface
    source_offset: TilePosition
    source_positions: TilePosition[]
    source_surface: LuaSurface
}
/**
 * Called when a {@link defines.command.build_base | defines.command.build_base} command reaches its destination, and before building starts.
 */
interface on_build_base_arrived extends event  {
    /**
     * The unit group the command was assigned to.
     */
    group?: LuaUnitGroup
    /**
     * The unit the command was assigned to.
     */
    unit?: LuaEntity
}
/**
 * Called when player builds something. Can be filtered using {@link LuaPlayerBuiltEntityEventFilter | LuaPlayerBuiltEntityEventFilter}.
 */
interface on_built_entity extends event  {
    created_entity: LuaEntity
    /**
     * The item prototype used to build the entity. Note this won't exist in some situations (built from blueprint, undo, etc).
     */
    item?: LuaItemPrototype
    player_index: number
    stack: LuaItemStack
    /**
     * The tags associated with this entity if any.
     */
    tags?: Tags
}
/**
 * Called when the deconstruction of an entity is canceled. Can be filtered using {@link LuaEntityDeconstructionCancelledEventFilter | LuaEntityDeconstructionCancelledEventFilter}.
 */
interface on_cancelled_deconstruction extends event  {
    entity: LuaEntity
    player_index?: number
}
/**
 * Called when the upgrade of an entity is canceled. Can be filtered using {@link LuaUpgradeCancelledEventFilter | LuaUpgradeCancelledEventFilter}.
 */
interface on_cancelled_upgrade extends event  {
    direction?: defines.direction
    entity: LuaEntity
    player_index?: number
    target: LuaEntityPrototype
}
/**
 * Called when a character corpse expires due to timeout or all of the items being removed from it.
 * @remarks
 * this is not called if the corpse is mined. See {@link defines.events.on_pre_player_mined_item | defines.events.on_pre_player_mined_item} to detect that.
 *
 */
interface on_character_corpse_expired extends event  {
    /**
     * The corpse.
     */
    corpse: LuaEntity
}
/**
 * Called when a chart tag is created.
 */
interface on_chart_tag_added extends event  {
    force: LuaForce
    player_index?: number
    tag: LuaCustomChartTag
}
/**
 * Called when a chart tag is modified by a player.
 */
interface on_chart_tag_modified extends event  {
    force: LuaForce
    old_icon?: SignalID
    old_player?: number
    old_text: string
    player_index?: number
    tag: LuaCustomChartTag
}
/**
 * Called just before a chart tag is deleted.
 */
interface on_chart_tag_removed extends event  {
    force: LuaForce
    player_index?: number
    tag: LuaCustomChartTag
}
/**
 * Called when a chunk is charted or re-charted.
 */
interface on_chunk_charted extends event  {
    /**
     * Area of the chunk.
     */
    area: BoundingBox
    force: LuaForce
    position: ChunkPosition
    surface_index: number
}
/**
 * Called when one or more chunks are deleted using {@link LuaSurface::delete_chunk | LuaSurface::delete_chunk}.
 */
interface on_chunk_deleted extends event  {
    /**
     * The chunks deleted.
     */
    positions: ChunkPosition[]
    surface_index: number
}
/**
 * Called when a chunk is generated.
 */
interface on_chunk_generated extends event  {
    /**
     * Area of the chunk.
     */
    area: BoundingBox
    /**
     * Position of the chunk.
     */
    position: ChunkPosition
    /**
     * The surface the chunk is on.
     */
    surface: LuaSurface
}
/**
 * Called when a combat robot expires through a lack of energy, or timeout.
 */
interface on_combat_robot_expired extends event  {
    /**
     * The entity that owns the robot if any.
     */
    owner?: LuaEntity
    robot: LuaEntity
}
/**
 * Called when a message is sent to the in-game console, either by a player or through the server interface.
 * @remarks
 * This event only fires for plain messages, not for any commands (including `/shout` or `/whisper`).
 *
 */
interface on_console_chat extends event  {
    /**
     * The chat message that was sent.
     */
    message: string
    /**
     * The player doing the chatting, if any.
     */
    player_index?: number
}
/**
 * Called when someone enters a command-like message regardless of it being a valid command.
 */
interface on_console_command extends event  {
    /**
     * The command as typed without the preceding forward slash ('/').
     */
    command: string
    /**
     * The parameters provided if any.
     */
    parameters: string
    /**
     * The player if any.
     */
    player_index?: number
}
/**
 * Called when a cutscene is cancelled by the player or by script.
 */
interface on_cutscene_cancelled extends event  {
    /**
     * The player the cutscene was shown to.
     */
    player_index: number
}
/**
 * Called when a cutscene is playing, each time it reaches a waypoint in that cutscene.
 * 
 * This refers to an index in the table previously passed to set_controller which started the cutscene.
 * @remarks
 * Due to implementation omission, waypoint_index is 0-based.
 *
 */
interface on_cutscene_waypoint_reached extends event  {
    /**
     * The player index of the player viewing the cutscene.
     */
    player_index: number
    /**
     * The index of the waypoint we just completed.
     */
    waypoint_index: number
}
/**
 * Called when the map difficulty settings are changed.
 * @remarks
 * It's not guaranteed that both settings are changed - just that at least one has been changed.
 *
 */
interface on_difficulty_settings_changed extends event  {
    old_recipe_difficulty: number
    old_technology_difficulty: number
}
/**
 * Called when an entity is cloned. Can be filtered for the source entity using {@link LuaEntityClonedEventFilter | LuaEntityClonedEventFilter}.
 */
interface on_entity_cloned extends event  {
    destination: LuaEntity
    source: LuaEntity
}
/**
 * Called when an entity is damaged. Can be filtered using {@link LuaEntityDamagedEventFilter | LuaEntityDamagedEventFilter}.
 * @remarks
 * This is not called when an entities health is set directly by another mod.
 *
 */
interface on_entity_damaged extends event  {
    /**
     * The entity that did the attacking if available.
     */
    cause?: LuaEntity
    damage_type: LuaDamagePrototype
    entity: LuaEntity
    /**
     * The damage amount after resistances.
     */
    final_damage_amount: number
    /**
     * The health of the entity after the damage was applied.
     */
    final_health: number
    /**
     * The force that did the attacking if any.
     */
    force?: LuaForce
    /**
     * The damage amount before resistances.
     */
    original_damage_amount: number
}
/**
 * Called after an entity is destroyed that has been registered with {@link LuaBootstrap::register_on_entity_destroyed | LuaBootstrap::register_on_entity_destroyed}.
 * @remarks
 * Depending on when a given entity is destroyed, this event will be fired at the end of the current tick or at the end of the next tick.
 *
 */
interface on_entity_destroyed extends event  {
    /**
     * The number returned by {@link register_on_entity_destroyed | LuaBootstrap::register_on_entity_destroyed} to uniquely identify this entity during this event.
     */
    registration_number: number
    /**
     * The {@link LuaEntity::unit_number | LuaEntity::unit_number} of the destroyed entity, if it had one.
     */
    unit_number?: number
}
/**
 * Called when an entity dies. Can be filtered using {@link LuaEntityDiedEventFilter | LuaEntityDiedEventFilter}.
 */
interface on_entity_died extends event  {
    /**
     * The entity that did the killing if available.
     */
    cause?: LuaEntity
    /**
     * The damage type if any.
     */
    damage_type?: LuaDamagePrototype
    /**
     * The entity that died.
     */
    entity: LuaEntity
    /**
     * The force that did the killing if any.
     */
    force?: LuaForce
    /**
     * The loot generated by this entity if any.
     */
    loot: LuaInventory
}
/**
 * Called when one of an entity's personal logistic slots changes.
 * @remarks
 * "Personal logistic slot" refers to a character or vehicle's personal request / auto-trash slots, not the request slots on logistic chests.
 *
 */
interface on_entity_logistic_slot_changed extends event  {
    /**
     * The entity for whom a logistic slot was changed.
     */
    entity: LuaEntity
    /**
     * The player who changed the slot, or `nil` if changed by script.
     */
    player_index?: number
    /**
     * The slot index that was changed.
     */
    slot_index: number
}
/**
 * Called after an entity has been renamed either by the player or through script.
 */
interface on_entity_renamed extends event  {
    by_script: boolean
    entity: LuaEntity
    old_name: string
    /**
     * If by_script is true this will not be included.
     */
    player_index?: number
}
/**
 * Called after entity copy-paste is done.
 */
interface on_entity_settings_pasted extends event  {
    /**
     * The destination entity settings were copied to.
     */
    destination: LuaEntity
    player_index: number
    /**
     * The source entity settings were copied from.
     */
    source: LuaEntity
}
/**
 * Called when an entity is spawned by a EnemySpawner
 */
interface on_entity_spawned extends event  {
    entity: LuaEntity
    spawner: LuaEntity
}
/**
 * Called after equipment is inserted into an equipment grid.
 */
interface on_equipment_inserted extends event  {
    /**
     * The equipment inserted.
     */
    equipment: LuaEquipment
    /**
     * The equipment grid inserted into.
     */
    grid: LuaEquipmentGrid
}
/**
 * Called after equipment is removed from an equipment grid.
 */
interface on_equipment_removed extends event  {
    /**
     * The count of equipment removed.
     */
    count: number
    /**
     * The equipment removed.
     */
    equipment: string
    /**
     * The equipment grid removed from.
     */
    grid: LuaEquipmentGrid
}
/**
 * Called when the a forces cease fire values change.
 */
interface on_force_cease_fire_changed extends event  {
    /**
     * If the other force was added or removed.
     */
    added: boolean
    /**
     * The force who's cease fire changed.
     */
    force: LuaForce
    /**
     * Which force was added or removed.
     */
    other_force: LuaForce
}
/**
 * Called when a new force is created using `game.create_force()`
 * @remarks
 * This is not called when the default forces (`'player'`, `'enemy'`, `'neutral'`) are created as they will always exist.
 *
 */
interface on_force_created extends event  {
    /**
     * The newly created force.
     */
    force: LuaForce
}
/**
 * Called when the a forces friends change.
 */
interface on_force_friends_changed extends event  {
    /**
     * If the other force was added or removed.
     */
    added: boolean
    /**
     * The force who's friends changed.
     */
    force: LuaForce
    /**
     * Which force was added or removed.
     */
    other_force: LuaForce
}
/**
 * Called when {@link LuaForce::reset | LuaForce::reset} is finished.
 */
interface on_force_reset extends event  {
    force: LuaForce
}
/**
 * Called after two forces have been merged using `game.merge_forces()`.
 * @remarks
 * The source force is invalidated before this event is called and the name can be re-used in this event if desired.
 *
 */
interface on_forces_merged extends event  {
    /**
     * The force entities where reassigned to.
     */
    destination: LuaForce
    /**
     * The index of the destroyed force.
     */
    source_index: number
    /**
     * The force destroyed.
     */
    source_name: string
}
/**
 * Called when two forces are about to be merged using `game.merge_forces()`.
 */
interface on_forces_merging extends event  {
    /**
     * The force to reassign entities to.
     */
    destination: LuaForce
    /**
     * The force to be destroyed
     */
    source: LuaForce
}
/**
 * Called when a game is created from a scenario. This is fired for every mod, even when the scenario's save data already includes it. In those cases however, {@link LuaBootstrap::on_init | LuaBootstrap::on_init} is not fired.
 * @remarks
 * This event is not fired when the scenario is loaded via the map editor.
 *
 */
interface on_game_created_from_scenario extends event  {
}
/**
 * Called when {@link LuaGuiElement | LuaGuiElement} checked state is changed (related to checkboxes and radio buttons).
 */
interface on_gui_checked_state_changed extends event  {
    /**
     * The element whose checked state changed.
     */
    element: LuaGuiElement
    /**
     * The player who did the change.
     */
    player_index: number
}
/**
 * Called when {@link LuaGuiElement | LuaGuiElement} is clicked.
 */
interface on_gui_click extends event  {
    /**
     * If alt was pressed.
     */
    alt: boolean
    /**
     * The mouse button used if any.
     */
    button: defines.mouse_button_type
    /**
     * If control was pressed.
     */
    control: boolean
    /**
     * The clicked element.
     */
    element: LuaGuiElement
    /**
     * The player who did the clicking.
     */
    player_index: number
    /**
     * If shift was pressed.
     */
    shift: boolean
}
/**
 * Called when the player closes the GUI they have open.
 * 
 * This can only be raised when the GUI's player controller is still valid. If a GUI is thus closed due to the player disconnecting, dying, or becoming a spectator in other ways, it won't cause this event to be raised.
 * @remarks
 * It's not advised to open any other GUI during this event because if this is run as a request to open a different GUI the game will force close the new opened GUI without notice to ensure the original requested GUI is opened.
 *
 */
interface on_gui_closed extends event  {
    /**
     * The custom GUI element that was open
     */
    element?: LuaGuiElement
    /**
     * The entity that was open
     */
    entity?: LuaEntity
    /**
     * The equipment that was open
     */
    equipment?: LuaEquipment
    /**
     * The GUI type that was open.
     */
    gui_type: defines.gui_type
    /**
     * The script inventory that was open
     */
    inventory?: LuaInventory
    /**
     * The item that was open
     */
    item?: LuaItemStack
    /**
     * The other player that was open
     */
    other_player?: LuaPlayer
    /**
     * The player.
     */
    player_index: number
    /**
     * The technology that was automatically selected when opening the research GUI
     */
    technology?: LuaTechnology
    /**
     * The tile position that was open
     */
    tile_position?: TilePosition
}
/**
 * Called when a {@link LuaGuiElement | LuaGuiElement} is confirmed, for example by pressing Enter in a textfield.
 */
interface on_gui_confirmed extends event  {
    /**
     * If alt was pressed.
     */
    alt: boolean
    /**
     * If control was pressed.
     */
    control: boolean
    /**
     * The confirmed element.
     */
    element: LuaGuiElement
    /**
     * The player who did the confirming.
     */
    player_index: number
    /**
     * If shift was pressed.
     */
    shift: boolean
}
/**
 * Called when {@link LuaGuiElement | LuaGuiElement} element value is changed (related to choose element buttons).
 */
interface on_gui_elem_changed extends event  {
    /**
     * The element whose element value changed.
     */
    element: LuaGuiElement
    /**
     * The player who did the change.
     */
    player_index: number
}
/**
 * Called when {@link LuaGuiElement | LuaGuiElement} element location is changed (related to frames in `player.gui.screen`).
 */
interface on_gui_location_changed extends event  {
    /**
     * The element whose location changed.
     */
    element: LuaGuiElement
    /**
     * The player who did the change.
     */
    player_index: number
}
/**
 * Called when the player opens a GUI.
 */
interface on_gui_opened extends event  {
    /**
     * The custom GUI element that was opened
     */
    element?: LuaGuiElement
    /**
     * The entity that was opened
     */
    entity?: LuaEntity
    /**
     * The equipment that was opened
     */
    equipment?: LuaEquipment
    /**
     * The GUI type that was opened.
     */
    gui_type: defines.gui_type
    /**
     * The script inventory that was opened
     */
    inventory?: LuaInventory
    /**
     * The item that was opened
     */
    item?: LuaItemStack
    /**
     * The other player that was opened
     */
    other_player?: LuaPlayer
    /**
     * The player.
     */
    player_index: number
}
/**
 * Called when {@link LuaGuiElement | LuaGuiElement} selected tab is changed (related to tabbed-panes).
 */
interface on_gui_selected_tab_changed extends event  {
    /**
     * The tabbed pane whose selected tab changed.
     */
    element: LuaGuiElement
    /**
     * The player who did the change.
     */
    player_index: number
}
/**
 * Called when {@link LuaGuiElement | LuaGuiElement} selection state is changed (related to drop-downs and listboxes).
 */
interface on_gui_selection_state_changed extends event  {
    /**
     * The element whose selection state changed.
     */
    element: LuaGuiElement
    /**
     * The player who did the change.
     */
    player_index: number
}
/**
 * Called when {@link LuaGuiElement | LuaGuiElement} switch state is changed (related to switches).
 */
interface on_gui_switch_state_changed extends event  {
    /**
     * The switch whose switch state changed.
     */
    element: LuaGuiElement
    /**
     * The player who did the change.
     */
    player_index: number
}
/**
 * Called when {@link LuaGuiElement | LuaGuiElement} text is changed by the player.
 */
interface on_gui_text_changed extends event  {
    /**
     * The edited element.
     */
    element: LuaGuiElement
    /**
     * The player who did the edit.
     */
    player_index: number
    /**
     * The new text in the element.
     */
    text: string
}
/**
 * Called when {@link LuaGuiElement | LuaGuiElement} slider value is changed (related to the slider element).
 */
interface on_gui_value_changed extends event  {
    /**
     * The element whose value changed.
     */
    element: LuaGuiElement
    /**
     * The player who did the change.
     */
    player_index: number
}
/**
 * Called when a land mine is armed.
 */
interface on_land_mine_armed extends event  {
    mine: LuaEntity
}
/**
 * Called when a custom Lua shortcut is pressed.
 */
interface on_lua_shortcut extends event  {
    player_index: number
    /**
     * Shortcut prototype name of the shortcut that was clicked.
     */
    prototype_name: string
}
/**
 * Called when an entity is marked for deconstruction with the Deconstruction planner or via script. Can be filtered using {@link LuaEntityMarkedForDeconstructionEventFilter | LuaEntityMarkedForDeconstructionEventFilter}.
 */
interface on_marked_for_deconstruction extends event  {
    entity: LuaEntity
    player_index?: number
}
/**
 * Called when an entity is marked for upgrade with the Upgrade planner or via script. Can be filtered using {@link LuaEntityMarkedForUpgradeEventFilter | LuaEntityMarkedForUpgradeEventFilter}.
 */
interface on_marked_for_upgrade extends event  {
    /**
     * The new direction (if any)
     */
    direction?: defines.direction
    entity: LuaEntity
    player_index?: number
    target: LuaEntityPrototype
}
/**
 * Called after a player purchases some offer from a `market` entity.
 */
interface on_market_item_purchased extends event  {
    /**
     * The amount of offers purchased.
     */
    count: number
    /**
     * The market entity.
     */
    market: LuaEntity
    /**
     * The index of the offer purchased.
     */
    offer_index: number
    /**
     * The player who did the purchasing.
     */
    player_index: number
}
/**
 * Called when the player uses the 'Open item GUI' control on an item defined with the 'mod-openable' flag
 */
interface on_mod_item_opened extends event  {
    /**
     * The item clicked on.
     */
    item: LuaItemPrototype
    /**
     * The player.
     */
    player_index: number
}
/**
 * Called directly after a permission group is added.
 */
interface on_permission_group_added extends event  {
    /**
     * The group added.
     */
    group: LuaPermissionGroup
    /**
     * The player that added the group.
     */
    player_index: number
}
/**
 * Called directly after a permission group is deleted.
 */
interface on_permission_group_deleted extends event  {
    /**
     * The group that was deleted.
     */
    group_name: string
    /**
     * The group id that was deleted.
     */
    id: number
    /**
     * The player doing the deletion.
     */
    player_index: number
}
/**
 * Called directly after a permission group is edited in some way.
 */
interface on_permission_group_edited extends event  {
    /**
     * The action when the `type` is "add-permission" or "remove-permission".
     */
    action: defines.input_action
    /**
     * The group being edited.
     */
    group: LuaPermissionGroup
    /**
     * The new group name when the `type` is "rename".
     */
    new_name: string
    /**
     * The old group name when the `type` is "rename".
     */
    old_name: string
    /**
     * The other player when the `type` is "add-player" or "remove-player".
     */
    other_player_index: number
    /**
     * The player that did the editing.
     */
    player_index: number
    /**
     * The edit type: "add-permission", "remove-permission", "enable-all", "disable-all", "add-player", "remove-player", "rename".
     */
    type: string
}
/**
 * Called directly after a permission string is imported.
 */
interface on_permission_string_imported extends event  {
    /**
     * The player that imported the string.
     */
    player_index: number
}
/**
 * Called when a player picks up an item.
 */
interface on_picked_up_item extends event  {
    item_stack: SimpleItemStack
    player_index: number
}
/**
 * Called after a player alt-reverse-selects an area with a selection-tool item.
 */
interface on_player_alt_reverse_selected_area extends event  {
    /**
     * The area selected.
     */
    area: BoundingBox
    /**
     * The entities selected.
     */
    entities: LuaEntity[]
    /**
     * The item used to select the area.
     */
    item: string
    /**
     * The player doing the selection.
     */
    player_index: number
    /**
     * The surface selected.
     */
    surface: LuaSurface
    /**
     * The tiles selected.
     */
    tiles: LuaTile[]
}
/**
 * Called after a player alt-selects an area with a selection-tool item.
 */
interface on_player_alt_selected_area extends event  {
    /**
     * The area selected.
     */
    area: BoundingBox
    /**
     * The entities selected.
     */
    entities: LuaEntity[]
    /**
     * The item used to select the area.
     */
    item: string
    /**
     * The player doing the selection.
     */
    player_index: number
    /**
     * The surface selected.
     */
    surface: LuaSurface
    /**
     * The tiles selected.
     */
    tiles: LuaTile[]
}
/**
 * Called after a players ammo inventory changed in some way.
 */
interface on_player_ammo_inventory_changed extends event  {
    player_index: number
}
/**
 * Called after a players armor inventory changed in some way.
 */
interface on_player_armor_inventory_changed extends event  {
    player_index: number
}
/**
 * Called when a player is banned.
 */
interface on_player_banned extends event  {
    /**
     * The player that did the banning if any.
     */
    by_player?: number
    /**
     * The player banned.
     */
    player_index?: number
    /**
     * The banned player name.
     */
    player_name: string
    /**
     * The reason given if any.
     */
    reason?: string
}
/**
 * Called after a player builds tiles.
 */
interface on_player_built_tile extends event  {
    /**
     * The item type used to build the tiles
     */
    item?: LuaItemPrototype
    player_index: number
    /**
     * The stack used to build the tiles (may be empty if all of the items where used to build the tiles).
     */
    stack?: LuaItemStack
    /**
     * The surface the tile(s) were built on.
     */
    surface_index: number
    /**
     * The tile prototype that was placed.
     */
    tile: LuaTilePrototype
    /**
     * The position data.
     */
    tiles: OldTileAndPosition[]
}
/**
 * Called when a player cancels crafting.
 */
interface on_player_cancelled_crafting extends event  {
    /**
     * The number of crafts that have been cancelled.
     */
    cancel_count: number
    /**
     * The crafting items returned to the player's inventory.
     */
    items: LuaInventory
    /**
     * The player that did the crafting.
     */
    player_index: number
    /**
     * The recipe that has been cancelled.
     */
    recipe: LuaRecipe
}
/**
 * Called after a player changes forces.
 */
interface on_player_changed_force extends event  {
    /**
     * The old force.
     */
    force: LuaForce
    /**
     * The player who changed forces.
     */
    player_index: number
}
/**
 * Called when the tile position a player is located at changes.
 */
interface on_player_changed_position extends event  {
    /**
     * The player.
     */
    player_index: number
}
/**
 * Called after a player changes surfaces.
 * @remarks
 * In the instance a player is moved off a surface due to it being deleted this is not called.
 *
 */
interface on_player_changed_surface extends event  {
    /**
     * The player who changed surfaces.
     */
    player_index: number
    /**
     * The surface index the player was on.
     */
    surface_index: number
}
/**
 * Called when cheat mode is disabled on a player.
 */
interface on_player_cheat_mode_disabled extends event  {
    /**
     * The player.
     */
    player_index: number
}
/**
 * Called when cheat mode is enabled on a player.
 */
interface on_player_cheat_mode_enabled extends event  {
    /**
     * The player.
     */
    player_index: number
}
/**
 * Called when a player clicks a gps tag
 */
interface on_player_clicked_gps_tag extends event  {
    /**
     * Index of the player
     */
    player_index: number
    /**
     * Map position contained in gps tag
     */
    position: MapPosition
    /**
     * Surface name contained in gps tag, even when such surface does not exists
     */
    surface: string
}
/**
 * Called when a player clicks the "confirm" button in the configure Blueprint GUI.
 */
interface on_player_configured_blueprint extends event  {
    /**
     * The player.
     */
    player_index: number
}
/**
 * Called when a player configures spidertron remote to be connected with a given spidertron
 */
interface on_player_configured_spider_remote extends event  {
    /**
     * The player that configured the remote.
     */
    player_index: number
    /**
     * Spider vehicle to which remote was connected to.
     */
    vehicle: LuaEntity
}
/**
 * Called when the player finishes crafting an item. This event fires just before the results are inserted into the player's inventory, not when the crafting is queued (see {@link on_pre_player_crafted_item | on_pre_player_crafted_item}).
 */
interface on_player_crafted_item extends event  {
    /**
     * The item that has been crafted.
     */
    item_stack: LuaItemStack
    /**
     * The player doing the crafting.
     */
    player_index: number
    /**
     * The recipe used to craft this item.
     */
    recipe: LuaRecipe
}
/**
 * Called after the player was created.
 */
interface on_player_created extends event  {
    player_index: number
}
/**
 * Called after a players cursorstack changed in some way.
 */
interface on_player_cursor_stack_changed extends event  {
    player_index: number
}
/**
 * Called when a player selects an area with a deconstruction planner.
 */
interface on_player_deconstructed_area extends event  {
    /**
     * If normal selection or alt selection was used.
     */
    alt: boolean
    /**
     * The area selected.
     */
    area: BoundingBox
    /**
     * The item used to select the area.
     */
    item: string
    /**
     * The player doing the selection.
     */
    player_index: number
    /**
     * The surface selected.
     */
    surface: LuaSurface
}
/**
 * Called when a player is demoted.
 */
interface on_player_demoted extends event  {
    /**
     * The player.
     */
    player_index: number
}
/**
 * Called after a player dies.
 */
interface on_player_died extends event  {
    cause?: LuaEntity
    player_index: number
}
/**
 * Called when the display resolution changes for a given player.
 */
interface on_player_display_resolution_changed extends event  {
    /**
     * The old display resolution
     */
    old_resolution: DisplayResolution
    /**
     * The player
     */
    player_index: number
}
/**
 * Called when the display scale changes for a given player.
 */
interface on_player_display_scale_changed extends event  {
    /**
     * The old display scale
     */
    old_scale: number
    /**
     * The player
     */
    player_index: number
}
/**
 * Called when the player's driving state has changed, meaning a player has either entered or left a vehicle.
 * @remarks
 * This event is not raised when the player is ejected from a vehicle due to it being destroyed.
 *
 */
interface on_player_driving_changed_state extends event  {
    /**
     * The vehicle if any.
     */
    entity?: LuaEntity
    player_index: number
}
/**
 * Called when a player drops an item on the ground.
 */
interface on_player_dropped_item extends event  {
    /**
     * The item-on-ground entity.
     */
    entity: LuaEntity
    player_index: number
}
/**
 * Called when a player fast-transfers something to or from an entity.
 */
interface on_player_fast_transferred extends event  {
    /**
     * The entity transferred from or to.
     */
    entity: LuaEntity
    /**
     * Whether the transfer was from player to entity. If `false`, the transfer was from entity to player.
     */
    from_player: boolean
    /**
     * The player transferred from or to.
     */
    player_index: number
}
/**
 * Called after player flushed fluid
 */
interface on_player_flushed_fluid extends event  {
    /**
     * Amount of fluid that was removed
     */
    amount: number
    /**
     * Entity from which flush was performed
     */
    entity: LuaEntity
    /**
     * Name of a fluid that was flushed
     */
    fluid: string
    /**
     * True if flush was requested only on this entity
     */
    only_this_entity: boolean
    /**
     * Index of the player
     */
    player_index: number
}
/**
 * Called after a players gun inventory changed in some way.
 */
interface on_player_gun_inventory_changed extends event  {
    player_index: number
}
/**
 * Called after a player joins the game. This is not called when loading a save file in singleplayer, as the player doesn't actually leave the game, and the save is just on pause until they rejoin.
 */
interface on_player_joined_game extends event  {
    player_index: number
}
/**
 * Called when a player is kicked.
 */
interface on_player_kicked extends event  {
    /**
     * The player that did the kicking if any.
     */
    by_player?: number
    /**
     * The player kicked.
     */
    player_index: number
    /**
     * The reason given if any.
     */
    reason?: string
}
/**
 * Called after a player leaves the game. This is not called when closing a save file in singleplayer, as the player doesn't actually leave the game, and the save is just on pause until they rejoin.
 */
interface on_player_left_game extends event  {
    player_index: number
    reason: defines.disconnect_reason
}
/**
 * Called after a players main inventory changed in some way.
 */
interface on_player_main_inventory_changed extends event  {
    player_index: number
}
/**
 * Called after the results of an entity being mined are collected just before the entity is destroyed. After this event any items in the buffer will be transferred into the player as if they came from mining the entity. Can be filtered using {@link LuaPlayerMinedEntityEventFilter | LuaPlayerMinedEntityEventFilter}.
 * @remarks
 * The buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.
 *
 */
interface on_player_mined_entity extends event  {
    /**
     * The temporary inventory that holds the result of mining the entity.
     */
    buffer: LuaInventory
    /**
     * The entity that has been mined.
     */
    entity: LuaEntity
    /**
     * The index of the player doing the mining.
     */
    player_index: number
}
/**
 * Called when the player mines something.
 */
interface on_player_mined_item extends event  {
    /**
     * The item given to the player
     */
    item_stack: SimpleItemStack
    player_index: number
}
/**
 * Called after a player mines tiles.
 */
interface on_player_mined_tile extends event  {
    player_index: number
    /**
     * The surface the tile(s) were mined from.
     */
    surface_index: number
    /**
     * The position data.
     */
    tiles: OldTileAndPosition[]
}
/**
 * Called when a player is muted.
 */
interface on_player_muted extends event  {
    /**
     * The player.
     */
    player_index: number
}
/**
 * Called when a player invokes the "smart pipette" over an entity.
 */
interface on_player_pipette extends event  {
    /**
     * The item put in the cursor
     */
    item: LuaItemPrototype
    /**
     * The player
     */
    player_index: number
    /**
     * If cheat mode was used to give a free stack of the item.
     */
    used_cheat_mode: boolean
}
/**
 * Called after the player puts equipment in an equipment grid
 */
interface on_player_placed_equipment extends event  {
    /**
     * The equipment put in the equipment grid.
     */
    equipment: LuaEquipment
    /**
     * The equipment grid the equipment was put in.
     */
    grid: LuaEquipmentGrid
    player_index: number
}
/**
 * Called when a player is promoted.
 */
interface on_player_promoted extends event  {
    /**
     * The player.
     */
    player_index: number
}
/**
 * Called when a player is removed (deleted) from the game. Not to be confused with the player logging of this is different in that the player is deleted as if he never existed in the save file.
 */
interface on_player_removed extends event  {
    /**
     * The player index that was removed
     */
    player_index: number
}
/**
 * Called after the player removes equipment from an equipment grid
 */
interface on_player_removed_equipment extends event  {
    /**
     * The count of equipment removed.
     */
    count: number
    /**
     * The equipment removed.
     */
    equipment: string
    /**
     * The equipment grid removed from.
     */
    grid: LuaEquipmentGrid
    player_index: number
}
/**
 * Called when a player repairs an entity. Can be filtered using {@link LuaPlayerRepairedEntityEventFilter | LuaPlayerRepairedEntityEventFilter}.
 */
interface on_player_repaired_entity extends event  {
    entity: LuaEntity
    player_index: number
}
/**
 * Called after a player respawns.
 */
interface on_player_respawned extends event  {
    player_index: number
    /**
     * The player port used to respawn if one was used.
     */
    player_port?: LuaEntity
}
/**
 * Called after a player reverse-selects an area with a selection-tool item.
 */
interface on_player_reverse_selected_area extends event  {
    /**
     * The area selected.
     */
    area: BoundingBox
    /**
     * The entities selected.
     */
    entities: LuaEntity[]
    /**
     * The item used to select the area.
     */
    item: string
    /**
     * The player doing the selection.
     */
    player_index: number
    /**
     * The surface selected.
     */
    surface: LuaSurface
    /**
     * The tiles selected.
     */
    tiles: LuaTile[]
}
/**
 * Called when the player rotates an entity. This event is only fired when the entity actually changes its orientation -- pressing the rotate key on an entity that can't be rotated won't fire this event.
 */
interface on_player_rotated_entity extends event  {
    /**
     * The rotated entity.
     */
    entity: LuaEntity
    player_index: number
    /**
     * The previous direction
     */
    previous_direction: defines.direction
}
/**
 * Called after a player selects an area with a selection-tool item.
 */
interface on_player_selected_area extends event  {
    /**
     * The area selected.
     */
    area: BoundingBox
    /**
     * The entities selected.
     */
    entities: LuaEntity[]
    /**
     * The item used to select the area.
     */
    item: string
    /**
     * The player doing the selection.
     */
    player_index: number
    /**
     * The surface selected.
     */
    surface: LuaSurface
    /**
     * The tiles selected.
     */
    tiles: LuaTile[]
}
/**
 * Called when a player sets a quickbar slot to anything (new value, or set to empty).
 */
interface on_player_set_quick_bar_slot extends event  {
    player_index: number
}
/**
 * Called when a player selects an area with a blueprint.
 */
interface on_player_setup_blueprint extends event  {
    /**
     * If normal selection or alt selection was used.
     */
    alt: boolean
    /**
     * The area selected.
     */
    area: BoundingBox
    /**
     * The item used to select the area.
     */
    item: string
    /**
     * The blueprint entity index to source entity mapping. Note: if any mod changes the blueprint this will be incorrect.
     */
    mapping: LuaLazyLoadedValue<{[key: number]: LuaEntity}>
    /**
     * The player doing the selection.
     */
    player_index: number
    /**
     * The surface selected.
     */
    surface: LuaSurface
}
/**
 * Called when a player toggles alt mode, also known as "show entity info".
 */
interface on_player_toggled_alt_mode extends event  {
    /**
     * The new alt mode value. This value is a shortcut for accessing {@link GameViewSettings::show_entity_info | GameViewSettings::show_entity_info} on the player.
     */
    alt_mode: boolean
    player_index: number
}
/**
 * Called when a player toggles the map editor on or off.
 */
interface on_player_toggled_map_editor extends event  {
    player_index: number
}
/**
 * Called after a players trash inventory changed in some way.
 */
interface on_player_trash_inventory_changed extends event  {
    player_index: number
}
/**
 * Called when a player is un-banned.
 */
interface on_player_unbanned extends event  {
    /**
     * The player that did the un-banning if any.
     */
    by_player?: number
    /**
     * The player un-banned.
     */
    player_index?: number
    /**
     * The player name un-banned.
     */
    player_name: string
    /**
     * The reason the player was banned if any.
     */
    reason?: string
}
/**
 * Called when a player is unmuted.
 */
interface on_player_unmuted extends event  {
    /**
     * The player.
     */
    player_index: number
}
/**
 * Called when a player uses a capsule that results in some game action.
 */
interface on_player_used_capsule extends event  {
    /**
     * The capsule item used.
     */
    item: LuaItemPrototype
    /**
     * The player.
     */
    player_index: number
    /**
     * The position the capsule was used.
     */
    position: MapPosition
}
/**
 * Called when a player uses spidertron remote to send a spidertron to a given position
 */
interface on_player_used_spider_remote extends event  {
    /**
     * The player that used the remote.
     */
    player_index: number
    /**
     * Goal position to which spidertron was sent to.
     */
    position: MapPosition
    /**
     * If the use was successful. It may fail when spidertron has different driver or when player is on different surface.
     */
    success: boolean
    /**
     * Spider vehicle which was requested to move.
     */
    vehicle: LuaEntity
}
/**
 * Called after an entity dies. Can be filtered using {@link LuaPostEntityDiedEventFilter | LuaPostEntityDiedEventFilter}.
 */
interface on_post_entity_died extends event  {
    /**
     * The corpses created by the entity dying if any.
     */
    corpses: LuaEntity[]
    /**
     * The damage type if any.
     */
    damage_type?: LuaDamagePrototype
    /**
     * The force that did the killing if any.
     */
    force?: LuaForce
    /**
     * The ghost created by the entity dying if any.
     */
    ghost?: LuaEntity
    /**
     * Position where the entity died.
     */
    position: MapPosition
    /**
     * The entity prototype of the entity that died.
     */
    prototype: LuaEntityPrototype
    /**
     * The surface the entity was on.
     */
    surface_index: number
    /**
     * The unit number the entity had if any.
     */
    unit_number?: number
}
/**
 * Called when players uses an item to build something. Called before {@link on_built_entity | on_built_entity}.
 */
interface on_pre_build extends event  {
    /**
     * Item was placed while moving.
     */
    created_by_moving: boolean
    /**
     * The direction the item was facing when placed.
     */
    direction: defines.direction
    /**
     * If building this blueprint was flipped horizontally.
     */
    flip_horizontal: boolean
    /**
     * If building this blueprint was flipped vertically.
     */
    flip_vertical: boolean
    /**
     * The player who did the placing.
     */
    player_index: number
    /**
     * Where the item was placed.
     */
    position: MapPosition
    /**
     * Item was placed using shift building.
     */
    shift_build: boolean
}
/**
 * Called before one or more chunks are deleted using {@link LuaSurface::delete_chunk | LuaSurface::delete_chunk}.
 */
interface on_pre_chunk_deleted extends event  {
    /**
     * The chunks to be deleted.
     */
    positions: ChunkPosition[]
    surface_index: number
}
/**
 * Called before entity copy-paste is done.
 */
interface on_pre_entity_settings_pasted extends event  {
    /**
     * The destination entity settings will be copied to.
     */
    destination: LuaEntity
    player_index: number
    /**
     * The source entity settings will be copied from.
     */
    source: LuaEntity
}
/**
 * Called before a ghost entity is destroyed as a result of being marked for deconstruction. Can be filtered using {@link LuaPreGhostDeconstructedEventFilter | LuaPreGhostDeconstructedEventFilter}.
 */
interface on_pre_ghost_deconstructed extends event  {
    ghost: LuaEntity
    /**
     * The player that did the deconstruction if any.
     */
    player_index?: number
}
/**
 * Called before a ghost entity is upgraded. Can be filtered using {@link LuaPreGhostUpgradedEventFilter | LuaPreGhostUpgradedEventFilter}.
 */
interface on_pre_ghost_upgraded extends event  {
    ghost: LuaEntity
    /**
     * The player that did the upgrade if any.
     */
    player_index?: number
    target: LuaEntityPrototype
}
/**
 * Called directly before a permission group is deleted.
 */
interface on_pre_permission_group_deleted extends event  {
    /**
     * The group to be deleted.
     */
    group: LuaPermissionGroup
    /**
     * The player doing the deletion.
     */
    player_index: number
}
/**
 * Called directly before a permission string is imported.
 */
interface on_pre_permission_string_imported extends event  {
    /**
     * The player importing the string.
     */
    player_index: number
}
/**
 * Called when a player queues something to be crafted.
 */
interface on_pre_player_crafted_item extends event  {
    /**
     * The items removed from the players inventory to do the crafting.
     */
    items: LuaInventory
    /**
     * The player doing the crafting.
     */
    player_index: number
    /**
     * The number of times the recipe is being queued.
     */
    queued_count: number
    /**
     * The recipe being queued.
     */
    recipe: LuaRecipe
}
/**
 * Called before a players dies.
 */
interface on_pre_player_died extends event  {
    cause?: LuaEntity
    player_index: number
}
/**
 * Called before a player leaves the game.
 */
interface on_pre_player_left_game extends event  {
    player_index: number
    reason: defines.disconnect_reason
}
/**
 * Called when the player completes a mining action, but before the entity is potentially removed from the map. This is called even if the entity does not end up being removed. Can be filtered using {@link LuaPrePlayerMinedEntityEventFilter | LuaPrePlayerMinedEntityEventFilter}.
 */
interface on_pre_player_mined_item extends event  {
    /**
     * The entity being mined
     */
    entity: LuaEntity
    player_index: number
}
/**
 * Called before a player is removed (deleted) from the game. Not to be confused with the player logging of this is different in that the player is deleted as if he never existed in the save file.
 */
interface on_pre_player_removed extends event  {
    /**
     * The player index that will be removed
     */
    player_index: number
}
/**
 * Called before a player toggles the map editor on or off.
 */
interface on_pre_player_toggled_map_editor extends event  {
    player_index: number
}
/**
 * Called directly before a robot explodes cliffs.
 */
interface on_pre_robot_exploded_cliff extends event  {
    cliff: LuaEntity
    /**
     * The cliff explosive used.
     */
    item: LuaItemPrototype
    robot: LuaEntity
}
/**
 * Called just before a script inventory is resized.
 */
interface on_pre_script_inventory_resized extends event  {
    inventory: LuaInventory
    /**
     * The mod that did the resizing. This will be `"core"` if done by console command or scenario script.
     */
    mod: string
    /**
     * The new inventory size.
     */
    new_size: number
    /**
     * The old inventory size.
     */
    old_size: number
    /**
     * If done by console command; the player who ran the command.
     */
    player_index?: number
}
/**
 * Called just before a surface is cleared (all entities removed and all chunks deleted).
 */
interface on_pre_surface_cleared extends event  {
    surface_index: number
}
/**
 * Called just before a surface is deleted.
 */
interface on_pre_surface_deleted extends event  {
    surface_index: number
}
/**
 * Called when research is cancelled.
 */
interface on_research_cancelled extends event  {
    /**
     * The force whose research was cancelled.
     */
    force: LuaForce
    /**
     * A mapping of technology name to how many times it was cancelled.
     */
    research: {[key: string]: number}
}
/**
 * Called when a research finishes.
 */
interface on_research_finished extends event  {
    /**
     * If the technology was researched by script.
     */
    by_script: boolean
    /**
     * The researched technology
     */
    research: LuaTechnology
}
/**
 * Called when a research is reversed (unresearched).
 */
interface on_research_reversed extends event  {
    /**
     * If the technology was un-researched by script.
     */
    by_script: boolean
    /**
     * The technology un-researched
     */
    research: LuaTechnology
}
/**
 * Called when a technology research starts.
 */
interface on_research_started extends event  {
    last_research?: LuaTechnology
    /**
     * The technology being researched
     */
    research: LuaTechnology
}
/**
 * Called when a resource entity reaches 0 or its minimum yield for infinite resources.
 */
interface on_resource_depleted extends event  {
    entity: LuaEntity
}
/**
 * Called when a construction robot builds an entity. Can be filtered using {@link LuaRobotBuiltEntityEventFilter | LuaRobotBuiltEntityEventFilter}.
 */
interface on_robot_built_entity extends event  {
    /**
     * The entity built.
     */
    created_entity: LuaEntity
    /**
     * The robot that did the building.
     */
    robot: LuaEntity
    /**
     * The item used to do the building.
     */
    stack: LuaItemStack
    /**
     * The tags associated with this entity if any.
     */
    tags?: Tags
}
/**
 * Called after a robot builds tiles.
 */
interface on_robot_built_tile extends event  {
    /**
     * The item type used to build the tiles.
     */
    item: LuaItemPrototype
    /**
     * The robot.
     */
    robot: LuaEntity
    /**
     * The stack used to build the tiles (may be empty if all of the items where used to build the tiles).
     */
    stack: LuaItemStack
    /**
     * The surface the tile(s) are build on.
     */
    surface_index: number
    /**
     * The tile prototype that was placed.
     */
    tile: LuaTilePrototype
    /**
     * The position data.
     */
    tiles: OldTileAndPosition[]
}
/**
 * Called directly after a robot explodes cliffs.
 */
interface on_robot_exploded_cliff extends event  {
    /**
     * The cliff explosive used.
     */
    item: LuaItemPrototype
    robot: LuaEntity
}
/**
 * Called when a robot mines an entity.
 */
interface on_robot_mined extends event  {
    /**
     * The entity the robot just picked up.
     */
    item_stack: SimpleItemStack
    /**
     * The robot that did the mining.
     */
    robot: LuaEntity
}
/**
 * Called after the results of an entity being mined are collected just before the entity is destroyed. After this event any items in the buffer will be transferred into the robot as if they came from mining the entity. Can be filtered using {@link LuaRobotMinedEntityEventFilter | LuaRobotMinedEntityEventFilter}.
 * @remarks
 * The buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.
 *
 */
interface on_robot_mined_entity extends event  {
    /**
     * The temporary inventory that holds the result of mining the entity.
     */
    buffer: LuaInventory
    /**
     * The entity that has been mined.
     */
    entity: LuaEntity
    /**
     * The robot doing the mining.
     */
    robot: LuaEntity
}
/**
 * Called after a robot mines tiles.
 */
interface on_robot_mined_tile extends event  {
    /**
     * The robot.
     */
    robot: LuaEntity
    /**
     * The surface the tile(s) were mined on.
     */
    surface_index: number
    /**
     * The position data.
     */
    tiles: OldTileAndPosition[]
}
/**
 * Called before a robot mines an entity. Can be filtered using {@link LuaPreRobotMinedEntityEventFilter | LuaPreRobotMinedEntityEventFilter}.
 */
interface on_robot_pre_mined extends event  {
    /**
     * The entity which is about to be mined.
     */
    entity: LuaEntity
    /**
     * The robot that's about to do the mining.
     */
    robot: LuaEntity
}
/**
 * Called when a rocket silo is ordered to be launched.
 */
interface on_rocket_launch_ordered extends event  {
    /**
     * The player that is riding the rocket, if any.
     */
    player_index?: number
    rocket: LuaEntity
    rocket_silo: LuaEntity
}
/**
 * Called when the rocket is launched.
 */
interface on_rocket_launched extends event  {
    /**
     * The player that is riding the rocket, if any.
     */
    player_index?: number
    rocket: LuaEntity
    rocket_silo?: LuaEntity
}
/**
 * Called when a runtime mod setting is changed by a player.
 */
interface on_runtime_mod_setting_changed extends event  {
    /**
     * If the `setting_type` is `"global"` and it was changed through the mod settings GUI, this is the index of the player that changed the global setting. If the `setting_type` is `"runtime-per-user"` and it changed a current setting of the player, this is the index of the player whose setting was changed. In all other cases, this is `nil`.
     */
    player_index?: number
    /**
     * The prototype name of the setting that was changed.
     */
    setting: string
    /**
     * Either "runtime-per-user" or "runtime-global".
     */
    setting_type: string
}
/**
 * Called just after a script inventory is resized.
 */
interface on_script_inventory_resized extends event  {
    inventory: LuaInventory
    /**
     * The mod that did the resizing. This will be `"core"` if done by console command or scenario script.
     */
    mod: string
    /**
     * The new inventory size.
     */
    new_size: number
    /**
     * The old inventory size.
     */
    old_size: number
    /**
     * Any items which didn't fit into the new inventory size.
     */
    overflow_inventory: LuaInventory
    /**
     * If done by console command; the player who ran the command.
     */
    player_index?: number
}
/**
 * Called when a {@link LuaSurface::request_path | LuaSurface::request_path} call completes.
 */
interface on_script_path_request_finished extends event  {
    /**
     * Handle to associate the callback with a particular call to {@link LuaSurface::request_path | LuaSurface::request_path}.
     */
    id: number
    /**
     * The actual path that the pathfinder has determined. `nil` if pathfinding failed.
     */
    path?: PathfinderWaypoint[]
    /**
     * Indicates that the pathfinder failed because it is too busy, and that you can retry later.
     */
    try_again_later: boolean
}
/**
 * Called when a script trigger effect is triggered.
 */
interface on_script_trigger_effect extends event  {
    /**
     * The effect_id specified in the trigger effect.
     */
    effect_id: string
    source_entity?: LuaEntity
    source_position?: MapPosition
    /**
     * The surface the effect happened on.
     */
    surface_index: number
    target_entity?: LuaEntity
    target_position?: MapPosition
}
/**
 * Called when an entity of type `radar` finishes scanning a sector. Can be filtered for the radar using {@link LuaSectorScannedEventFilter | LuaSectorScannedEventFilter}.
 */
interface on_sector_scanned extends event  {
    /**
     * Area of the scanned chunk.
     */
    area: BoundingBox
    /**
     * The chunk scanned.
     */
    chunk_position: ChunkPosition
    /**
     * The radar that did the scanning.
     */
    radar: LuaEntity
}
/**
 * Called after the selected entity changes for a given player.
 */
interface on_selected_entity_changed extends event  {
    /**
     * The last selected entity if it still exists and there was one.
     */
    last_entity?: LuaEntity
    /**
     * The player whose selected entity changed.
     */
    player_index: number
}
/**
 * Called when a spider finishes moving to its autopilot position.
 */
interface on_spider_command_completed extends event  {
    /**
     * Spider vehicle which was requested to move.
     */
    vehicle: LuaEntity
}
/**
 * Called when a translation request generated through {@link LuaPlayer::request_translation | LuaPlayer::request_translation} is translated.
 */
interface on_string_translated extends event  {
    /**
     * The localised string being translated.
     */
    localised_string: LocalisedString
    /**
     * The player whose locale was used for the translation.
     */
    player_index: number
    /**
     * The translated `localised_string`.
     */
    result: string
    /**
     * Whether the requested localised string was valid and could be translated.
     */
    translated: boolean
}
/**
 * Called just after a surface is cleared (all entities removed and all chunks deleted).
 */
interface on_surface_cleared extends event  {
    surface_index: number
}
/**
 * Called when a surface is created.
 * @remarks
 * This is not called when the default surface is created as it will always exist.
 *
 */
interface on_surface_created extends event  {
    surface_index: number
}
/**
 * Called after a surface is deleted.
 */
interface on_surface_deleted extends event  {
    surface_index: number
}
/**
 * Called after a surface is imported.
 */
interface on_surface_imported extends event  {
    /**
     * The original surface name.
     */
    original_name: string
    surface_index: number
}
/**
 * Called when a surface is renamed.
 */
interface on_surface_renamed extends event  {
    new_name: string
    old_name: string
    surface_index: number
}
/**
 * Called when {@link LuaForce::reset_technology_effects | LuaForce::reset_technology_effects} is finished.
 */
interface on_technology_effects_reset extends event  {
    force: LuaForce
}
/**
 * It is fired once every tick. Since this event is fired every tick, its handler shouldn't include performance heavy code.
 */
interface on_tick extends event  {
}
/**
 * Called when a train changes state (started to stopped and vice versa)
 */
interface on_train_changed_state extends event  {
    old_state: defines.train_state
    train: LuaTrain
}
/**
 * Called when a new train is created either through disconnecting/connecting an existing one or building a new one.
 */
interface on_train_created extends event  {
    /**
     * The first old train id when splitting/merging trains.
     */
    old_train_id_1?: number
    /**
     * The second old train id when splitting/merging trains.
     */
    old_train_id_2?: number
    train: LuaTrain
}
/**
 * Called when a trains schedule is changed either by the player or through script.
 */
interface on_train_schedule_changed extends event  {
    /**
     * The player who made the change if any.
     */
    player_index?: number
    train: LuaTrain
}
/**
 * Called when an entity with a trigger prototype (such as capsules) create an entity AND that trigger prototype defined `trigger_created_entity="true"`.
 */
interface on_trigger_created_entity extends event  {
    entity: LuaEntity
    source?: LuaEntity
}
/**
 * Called when an entity with a trigger prototype (such as capsules) fire an artillery projectile AND that trigger prototype defined `trigger_fired_artillery="true"`.
 */
interface on_trigger_fired_artillery extends event  {
    entity: LuaEntity
    source?: LuaEntity
}
/**
 * Called when a unit is added to a unit group.
 */
interface on_unit_added_to_group extends event  {
    group: LuaUnitGroup
    unit: LuaEntity
}
/**
 * Called when a new unit group is created, before any members are added to it.
 */
interface on_unit_group_created extends event  {
    group: LuaUnitGroup
}
/**
 * Called when a unit group finishes gathering and starts executing its command.
 */
interface on_unit_group_finished_gathering extends event  {
    group: LuaUnitGroup
}
/**
 * Called when a unit is removed from a unit group.
 */
interface on_unit_removed_from_group extends event  {
    group: LuaUnitGroup
    unit: LuaEntity
}
/**
 * Called when a worker (construction or logistic) robot expires through a lack of energy.
 */
interface on_worker_robot_expired extends event  {
    robot: LuaEntity
}
/**
 * A static event mods can use to tell other mods they built something by script. This event is only raised if a mod does so with {@link LuaBootstrap::raise_event | LuaBootstrap::raise_event} or {@link LuaBootstrap::raise_script_built | LuaBootstrap::raise_script_built}, or when `raise_built` is passed to {@link LuaSurface::create_entity | LuaSurface::create_entity}. Can be filtered using {@link LuaScriptRaisedBuiltEventFilter | LuaScriptRaisedBuiltEventFilter}.
 */
interface script_raised_built extends event  {
    /**
     * The entity that has been built.
     */
    entity: LuaEntity
}
/**
 * A static event mods can use to tell other mods they destroyed something by script. This event is only raised if a mod does so with {@link LuaBootstrap::raise_event | LuaBootstrap::raise_event} or {@link LuaBootstrap::raise_script_destroy | LuaBootstrap::raise_script_destroy}, or when `raise_destroy` is passed to {@link LuaEntity::destroy | LuaEntity::destroy}. Can be filtered using {@link LuaScriptRaisedDestroyEventFilter | LuaScriptRaisedDestroyEventFilter}.
 */
interface script_raised_destroy extends event  {
    /**
     * The entity that was destroyed.
     */
    entity: LuaEntity
}
/**
 * A static event mods can use to tell other mods they revived something by script. This event is only raised if a mod does so with {@link LuaBootstrap::raise_event | LuaBootstrap::raise_event} or {@link LuaBootstrap::raise_script_revive | LuaBootstrap::raise_script_revive}, or when `raise_revive` is passed to {@link LuaEntity::revive | LuaEntity::revive}. Can be filtered using {@link LuaScriptRaisedReviveEventFilter | LuaScriptRaisedReviveEventFilter}.
 */
interface script_raised_revive extends event  {
    /**
     * The entity that was revived.
     */
    entity: LuaEntity
    /**
     * The tags associated with this entity, if any.
     */
    tags?: Tags
}
/**
 * A static event mods can use to tell other mods they changed tiles on a surface by script. This event is only raised if a mod does so with {@link LuaBootstrap::raise_event | LuaBootstrap::raise_event} or {@link LuaBootstrap::raise_script_set_tiles | LuaBootstrap::raise_script_set_tiles}, or when `raise_event` is passed to {@link LuaSurface::set_tiles | LuaSurface::set_tiles}.
 */
interface script_raised_set_tiles extends event  {
    /**
     * The surface whose tiles were changed.
     */
    surface_index: number
    /**
     * The tiles that were changed.
     */
    tiles: Tile[]
}
