// Factorio event definitions
// Factorio API reference https://lua-api.factorio.com/latest/index.html
// Generated from JSON source https://lua-api.factorio.com/latest/runtime-api.json
// Definition source https://github.com/sguest/factorio-types
// Factorio version 2.0.29
// API version 6

declare namespace runtime {
/**
 * Called when a {@link CustomInputPrototype | prototype:CustomInputPrototype} is activated.
 * @example ```
-- This will be raised when a custom input with the name "my-potato-control" and action "lua" is pressed
script.on_event("my-potato-control", function(event)
  game.print("Keyboard shortcut pressed on tick: " ..tostring(event.tick))
end)
```
 */
interface CustomInputEvent {
    /**
     * The mouse cursor display location when the custom input was activated.
     */
    cursor_display_location: GuiLocation;
    /**
     * The mouse cursor position when the custom input was activated.
     */
    cursor_position: MapPosition;
    /**
     * The prototype name of the custom input that was activated.
     */
    input_name: string;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player that activated the custom input.
     */
    player_index: uint;
    /**
     * Information about the prototype that is selected when the custom input is used. Needs to be enabled on the custom input's prototype. `nil` if none is selected.
     */
    selected_prototype?: SelectedPrototypeData;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when an achievement is gained.
 */
interface on_achievement_gained {
    achievement: LuaAchievementPrototype;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who gained the achievement.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a unit/group completes a command.
 */
interface on_ai_command_completed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    result: defines.behavior_result;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * unit_number/group_number of the unit/group which just completed a command.
     */
    unit_number: uint;
    /**
     * Was this command generated by a distraction.
     */
    was_distracted: boolean;
}
/**
 * Called when an area of the map is cloned.
 */
interface on_area_cloned {
    clear_destination_decoratives: boolean;
    clear_destination_entities: boolean;
    clone_decoratives: boolean;
    clone_entities: boolean;
    clone_tiles: boolean;
    destination_area: BoundingBox;
    destination_force?: LuaForce;
    destination_surface: LuaSurface;
    /**
     * Identifier of the event
     */
    name: defines.events;
    source_area: BoundingBox;
    source_surface: LuaSurface;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a biter migration builds a base.
 *
 * This will be called multiple times for each migration, once for every biter that is sacrificed to build part of the new base.
 */
interface on_biter_base_built {
    /**
     * The entity that was built.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a set of positions on the map is cloned.
 */
interface on_brush_cloned {
    clear_destination_decoratives: boolean;
    clear_destination_entities: boolean;
    clone_decoratives: boolean;
    clone_entities: boolean;
    clone_tiles: boolean;
    destination_force?: LuaForce;
    destination_offset: TilePosition;
    destination_surface: LuaSurface;
    /**
     * Identifier of the event
     */
    name: defines.events;
    source_offset: TilePosition;
    source_positions: TilePosition[];
    source_surface: LuaSurface;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a {@link defines.command.build_base | runtime:defines.command.build_base} command reaches its destination, and before building starts.
 */
interface on_build_base_arrived {
    /**
     * The unit group the command was assigned to.
     */
    group?: LuaCommandable;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The unit the command was assigned to.
     */
    unit?: LuaEntity;
}
/**
 * Called when player builds something.
 */
interface on_built_entity {
    consumed_items: LuaInventory;
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * The tags associated with this entity if any.
     */
    tags?: Tags;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the deconstruction of an entity is canceled.
 */
interface on_cancelled_deconstruction {
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the upgrade of an entity is canceled.
 */
interface on_cancelled_upgrade {
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index?: uint;
    quality: LuaQualityPrototype;
    target: LuaEntityPrototype;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a cargo pod departs a surface.
 */
interface on_cargo_pod_finished_ascending {
    cargo_pod: LuaEntity;
    /**
     * True for pods spawned on a rocket. This event triggers for platform and modded pods as well, but only when true will the pod count towards rocket launch statistics and trigger 'rocket-launched' achievement with objective_condition.
     */
    launched_by_rocket: boolean;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player that is riding the rocket, if any.
     */
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a character corpse expires due to timeout or all of the items being removed from it.
 *
 * this is not called if the corpse is mined. See {@link defines.events.on_pre_player_mined_item | runtime:defines.events.on_pre_player_mined_item} to detect that.
 */
interface on_character_corpse_expired {
    /**
     * The corpse.
     */
    corpse: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a chart tag is created.
 */
interface on_chart_tag_added {
    force: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index?: uint;
    tag: LuaCustomChartTag;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a chart tag is modified by a player.
 */
interface on_chart_tag_modified {
    force: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    old_icon: SignalID;
    old_player_index?: uint;
    old_position: MapPosition;
    old_surface: LuaSurface;
    old_text: string;
    player_index?: uint;
    tag: LuaCustomChartTag;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called just before a chart tag is deleted.
 */
interface on_chart_tag_removed {
    force: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index?: uint;
    tag: LuaCustomChartTag;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a chunk is charted or re-charted.
 */
interface on_chunk_charted {
    /**
     * Area of the chunk.
     */
    area: BoundingBox;
    force: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    position: ChunkPosition;
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when one or more chunks are deleted using {@link LuaSurface::delete_chunk | runtime:LuaSurface::delete_chunk}.
 */
interface on_chunk_deleted {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The chunks deleted.
     */
    positions: ChunkPosition[];
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a chunk is generated.
 */
interface on_chunk_generated {
    /**
     * Area of the chunk.
     */
    area: BoundingBox;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Position of the chunk.
     */
    position: ChunkPosition;
    /**
     * The surface the chunk is on.
     */
    surface: LuaSurface;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a combat robot expires through a lack of energy, or timeout.
 */
interface on_combat_robot_expired {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The entity that owns the robot if any.
     */
    owner?: LuaEntity;
    robot: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a message is sent to the in-game console, either by a player or through the server interface.
 *
 * This event only fires for plain messages, not for any commands (including `/shout` or `/whisper`).
 */
interface on_console_chat {
    /**
     * The chat message that was sent.
     */
    message: string;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player doing the chatting, if any.
     */
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when someone enters a command-like message regardless of it being a valid command.
 */
interface on_console_command {
    /**
     * The command as typed without the preceding forward slash ('/').
     */
    command: string;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The parameters provided if any.
     */
    parameters: string;
    /**
     * The player if any.
     */
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a cutscene is cancelled by the player or by script.
 */
interface on_cutscene_cancelled {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player the cutscene was shown to.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a cutscene finishes naturally (was not cancelled).
 */
interface on_cutscene_finished {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player the cutscene was shown to.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a cutscene starts.
 */
interface on_cutscene_started {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player the cutscene is being shown to.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a cutscene is playing, each time it reaches a waypoint in that cutscene.
 *
 * This refers to an index in the table previously passed to set_controller which started the cutscene.
 */
interface on_cutscene_waypoint_reached {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player index of the player viewing the cutscene.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The index of the waypoint we just completed.
     */
    waypoint_index: uint;
}
/**
 * Called when an entity is cloned. The filter applies to the source entity.
 */
interface on_entity_cloned {
    destination: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    source: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after an entity has been recolored either by the player or through script.
 *
 * Automatic recoloring due to {@link LuaPlayer::color | runtime:LuaPlayer::color} will not raise events, as that is a separate mechanism.
 */
interface on_entity_color_changed {
    /**
     * The entity that was recolored.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when an entity is damaged. This is not called when an entities health is set directly by another mod.
 */
interface on_entity_damaged {
    /**
     * The entity that originally triggered the events that led to this damage, if available (e.g. the character, turret, etc. that pulled the trigger).
     */
    cause?: LuaEntity;
    damage_type: LuaDamagePrototype;
    entity: LuaEntity;
    /**
     * The damage amount after resistances.
     */
    final_damage_amount: float;
    /**
     * The health of the entity after the damage was applied.
     */
    final_health: float;
    /**
     * The force that did the attacking if any.
     */
    force?: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The damage amount before resistances.
     */
    original_damage_amount: float;
    /**
     * The entity that is directly dealing the damage, if available (e.g. the projectile, flame, sticker, grenade, laser beam, etc.).
     */
    source?: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when an entity dies.
 */
interface on_entity_died {
    /**
     * The entity that did the killing if available.
     */
    cause?: LuaEntity;
    /**
     * The damage type if any.
     */
    damage_type?: LuaDamagePrototype;
    /**
     * The entity that died.
     */
    entity: LuaEntity;
    /**
     * The force that did the killing if any.
     */
    force?: LuaForce;
    /**
     * The loot generated by this entity if any.
     */
    loot: LuaInventory;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when one of an entity's logistic slots changes.
 */
interface on_entity_logistic_slot_changed {
    /**
     * The entity for whom a logistic slot was changed.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who changed the slot, or `nil` if changed by script.
     */
    player_index?: uint;
    /**
     * The section changed.
     */
    section: LuaLogisticSection;
    /**
     * The slot index that was changed.
     */
    slot_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after an entity has been renamed either by the player or through script.
 */
interface on_entity_renamed {
    by_script: boolean;
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    old_name: string;
    /**
     * If by_script is true this will not be included.
     */
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after entity copy-paste is done.
 */
interface on_entity_settings_pasted {
    /**
     * The destination entity settings were copied to.
     */
    destination: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * The source entity settings were copied from.
     */
    source: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when an entity is spawned by a EnemySpawner
 */
interface on_entity_spawned {
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    spawner: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after equipment is inserted into an equipment grid.
 */
interface on_equipment_inserted {
    /**
     * The equipment inserted.
     */
    equipment: LuaEquipment;
    /**
     * The equipment grid inserted into.
     */
    grid: LuaEquipmentGrid;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after equipment is removed from an equipment grid.
 */
interface on_equipment_removed {
    /**
     * The count of equipment removed.
     */
    count: uint;
    /**
     * The equipment removed.
     */
    equipment: string;
    /**
     * The equipment grid removed from.
     */
    grid: LuaEquipmentGrid;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The equipment quality.
     */
    quality: string;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the a forces cease fire values change.
 */
interface on_force_cease_fire_changed {
    /**
     * If the other force was added or removed.
     */
    added: boolean;
    /**
     * The force who's cease fire changed.
     */
    force: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Which force was added or removed.
     */
    other_force: LuaForce;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a new force is created using `game.create_force()`
 *
 * This is not called when the default forces (`'player'`, `'enemy'`, `'neutral'`) are created as they will always exist.
 */
interface on_force_created {
    /**
     * The newly created force.
     */
    force: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the a forces friends change.
 */
interface on_force_friends_changed {
    /**
     * If the other force was added or removed.
     */
    added: boolean;
    /**
     * The force who's friends changed.
     */
    force: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Which force was added or removed.
     */
    other_force: LuaForce;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when {@link LuaForce::reset | runtime:LuaForce::reset} is finished.
 */
interface on_force_reset {
    force: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after two forces have been merged using `game.merge_forces()`.
 *
 * The source force is invalidated before this event is called and the name can be re-used in this event if desired.
 */
interface on_forces_merged {
    /**
     * The force entities where reassigned to.
     */
    destination: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The index of the destroyed force.
     */
    source_index: uint;
    /**
     * The force destroyed.
     */
    source_name: string;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when two forces are about to be merged using `game.merge_forces()`.
 */
interface on_forces_merging {
    /**
     * The force to reassign entities to.
     */
    destination: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The force to be destroyed
     */
    source: LuaForce;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a game is created from a scenario. This is fired for every mod, even when the scenario's save data already includes it. In those cases however, {@link LuaBootstrap::on_init | runtime:LuaBootstrap::on_init} is not fired.
 *
 * This event is not fired when the scenario is loaded via the map editor.
 */
interface on_game_created_from_scenario {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when {@link LuaGuiElement | runtime:LuaGuiElement} checked state is changed (related to checkboxes and radio buttons).
 */
interface on_gui_checked_state_changed {
    /**
     * The element whose checked state changed.
     */
    element: LuaGuiElement;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who did the change.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when {@link LuaGuiElement | runtime:LuaGuiElement} is clicked.
 */
interface on_gui_click {
    /**
     * If alt was pressed.
     */
    alt: boolean;
    /**
     * The mouse button used if any.
     */
    button: defines.mouse_button_type;
    /**
     * If control was pressed.
     */
    control: boolean;
    /**
     * The display location of the player's cursor.
     */
    cursor_display_location: GuiLocation;
    /**
     * The clicked element.
     */
    element: LuaGuiElement;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who did the clicking.
     */
    player_index: uint;
    /**
     * If shift was pressed.
     */
    shift: boolean;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the player closes the GUI they have open.
 *
 * This can only be raised when the GUI's player controller is still valid. If a GUI is thus closed due to the player disconnecting, dying, or becoming a spectator in other ways, it won't cause this event to be raised.
 *
 * It's not advised to open any other GUI during this event because if this is run as a request to open a different GUI the game will force close the new opened GUI without notice to ensure the original requested GUI is opened.
 */
interface on_gui_closed {
    /**
     * The custom GUI element that was open
     */
    element?: LuaGuiElement;
    /**
     * The entity that was open
     */
    entity?: LuaEntity;
    /**
     * The equipment that was open
     */
    equipment?: LuaEquipment;
    /**
     * The GUI type that was open.
     */
    gui_type: defines.gui_type;
    /**
     * The script inventory that was open
     */
    inventory?: LuaInventory;
    /**
     * The item that was open
     */
    item?: LuaItemStack;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The other player that was open
     */
    other_player?: LuaPlayer;
    /**
     * The player.
     */
    player_index: uint;
    /**
     * The technology that was automatically selected when opening the research GUI
     */
    technology?: LuaTechnology;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The tile position that was open
     */
    tile_position?: TilePosition;
}
/**
 * Called when a {@link LuaGuiElement | runtime:LuaGuiElement} is confirmed, for example by pressing Enter in a textfield.
 */
interface on_gui_confirmed {
    /**
     * If alt was pressed.
     */
    alt: boolean;
    /**
     * If control was pressed.
     */
    control: boolean;
    /**
     * The confirmed element.
     */
    element: LuaGuiElement;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who did the confirming.
     */
    player_index: uint;
    /**
     * If shift was pressed.
     */
    shift: boolean;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when {@link LuaGuiElement | runtime:LuaGuiElement} element value is changed (related to choose element buttons).
 */
interface on_gui_elem_changed {
    /**
     * The element whose element value changed.
     */
    element: LuaGuiElement;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who did the change.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when {@link LuaGuiElement | runtime:LuaGuiElement} is hovered by the mouse.
 *
 * Only fired for events whose {@link LuaGuiElement::raise_hover_events | runtime:LuaGuiElement::raise_hover_events} is `true`.
 */
interface on_gui_hover {
    /**
     * The element that is being hovered over.
     */
    element: LuaGuiElement;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player whose cursor is hovering.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the player's cursor leaves a {@link LuaGuiElement | runtime:LuaGuiElement} that was previously hovered.
 *
 * Only fired for events whose {@link LuaGuiElement::raise_hover_events | runtime:LuaGuiElement::raise_hover_events} is `true`.
 */
interface on_gui_leave {
    /**
     * The element that was being hovered.
     */
    element: LuaGuiElement;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player whose cursor was hovering.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when {@link LuaGuiElement | runtime:LuaGuiElement} element location is changed (related to frames in `player.gui.screen`).
 */
interface on_gui_location_changed {
    /**
     * The element whose location changed.
     */
    element: LuaGuiElement;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who did the change.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the player opens a GUI.
 */
interface on_gui_opened {
    /**
     * The custom GUI element that was opened
     */
    element?: LuaGuiElement;
    /**
     * The entity that was opened
     */
    entity?: LuaEntity;
    /**
     * The equipment that was opened
     */
    equipment?: LuaEquipment;
    /**
     * The GUI type that was opened.
     */
    gui_type: defines.gui_type;
    /**
     * The script inventory that was opened
     */
    inventory?: LuaInventory;
    /**
     * The item that was opened
     */
    item?: LuaItemStack;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The other player that was opened
     */
    other_player?: LuaPlayer;
    /**
     * The player.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when {@link LuaGuiElement | runtime:LuaGuiElement} selected tab is changed (related to tabbed-panes).
 */
interface on_gui_selected_tab_changed {
    /**
     * The tabbed pane whose selected tab changed.
     */
    element: LuaGuiElement;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who did the change.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when {@link LuaGuiElement | runtime:LuaGuiElement} selection state is changed (related to drop-downs and listboxes).
 */
interface on_gui_selection_state_changed {
    /**
     * The element whose selection state changed.
     */
    element: LuaGuiElement;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who did the change.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when {@link LuaGuiElement | runtime:LuaGuiElement} switch state is changed (related to switches).
 */
interface on_gui_switch_state_changed {
    /**
     * The switch whose switch state changed.
     */
    element: LuaGuiElement;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who did the change.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when {@link LuaGuiElement | runtime:LuaGuiElement} text is changed by the player.
 */
interface on_gui_text_changed {
    /**
     * The edited element.
     */
    element: LuaGuiElement;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who did the edit.
     */
    player_index: uint;
    /**
     * The new text in the element.
     */
    text: string;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when {@link LuaGuiElement | runtime:LuaGuiElement} slider value is changed (related to the slider element).
 */
interface on_gui_value_changed {
    /**
     * The element whose value changed.
     */
    element: LuaGuiElement;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who did the change.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a land mine is armed.
 */
interface on_land_mine_armed {
    mine: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a custom {@link Lua shortcut | prototype:ShortcutPrototype} is pressed.
 */
interface on_lua_shortcut {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Shortcut prototype name of the shortcut that was clicked.
     */
    prototype_name: string;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when an entity is marked for deconstruction with the Deconstruction planner or via script.
 */
interface on_marked_for_deconstruction {
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when an entity is marked for upgrade with the Upgrade planner or via script.
 */
interface on_marked_for_upgrade {
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index?: uint;
    quality: LuaQualityPrototype;
    target: LuaEntityPrototype;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player purchases some offer from a `market` entity.
 */
interface on_market_item_purchased {
    /**
     * The amount of offers purchased.
     */
    count: uint;
    /**
     * The market entity.
     */
    market: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The index of the offer purchased.
     */
    offer_index: uint;
    /**
     * The player who did the purchasing.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the player uses the 'Open item GUI' control on an item defined with the 'mod-openable' flag
 */
interface on_mod_item_opened {
    /**
     * The item clicked on.
     */
    item: LuaItemPrototype;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player.
     */
    player_index: uint;
    /**
     * The item quality clicked on.
     */
    quality: LuaQualityPrototype;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after an object is destroyed which was registered with {@link LuaBootstrap::register_on_object_destroyed | runtime:LuaBootstrap::register_on_object_destroyed} previously.
 *
 * Depending on when a given object is destroyed, this event will be fired at the end of the current tick or at the end of the next tick. The event's timing is independent of the in-world object being destroyed.
 */
interface on_object_destroyed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The number returned by {@link register_on_object_destroyed | runtime:LuaBootstrap::register_on_object_destroyed} to uniquely identify this object during this event.
     */
    registration_number: uint64;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * Type of the object that was destroyed. Same as third value returned by {@link LuaBootstrap::register_on_object_destroyed | runtime:LuaBootstrap::register_on_object_destroyed}
     */
    type: defines.target_type;
    /**
     * Useful identifier of the object. Same as second value returned by {@link LuaBootstrap::register_on_object_destroyed | runtime:LuaBootstrap::register_on_object_destroyed}
     */
    useful_id: uint64;
}
/**
 * Called directly after a permission group is added.
 */
interface on_permission_group_added {
    /**
     * The group added.
     */
    group: LuaPermissionGroup;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player that added the group or `nil` if by a mod.
     */
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called directly after a permission group is deleted.
 */
interface on_permission_group_deleted {
    /**
     * The group that was deleted.
     */
    group_name: string;
    /**
     * The group id that was deleted.
     */
    id: uint;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player doing the deletion or `nil` if by a mod.
     */
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called directly after a permission group is edited in some way.
 */
interface on_permission_group_edited {
    /**
     * The action when the `type` is `"add-permission"` or `"remove-permission"`.
     */
    action: defines.input_action;
    /**
     * The group being edited.
     */
    group: LuaPermissionGroup;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The new group name when the `type` is `"rename"`.
     */
    new_name: string;
    /**
     * The old group name when the `type` is `"rename"`.
     */
    old_name: string;
    /**
     * The other player when the `type` is `"add-player"` or `"remove-player"`.
     */
    other_player_index: uint;
    /**
     * The player that did the editing or `nil` if by a mod.
     */
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The edit type.
     */
    type: 'add-permission' | 'remove-permission' | 'enable-all' | 'disable-all' | 'add-player' | 'remove-player' | 'rename';
}
/**
 * Called directly after a permission string is imported.
 */
interface on_permission_string_imported {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player that imported the string.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player picks up an item.
 */
interface on_picked_up_item {
    item_stack: SimpleItemStack;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player alt-reverse-selects an area with a selection-tool item.
 */
interface on_player_alt_reverse_selected_area {
    /**
     * The area selected.
     */
    area: BoundingBox;
    /**
     * The entities selected.
     */
    entities: LuaEntity[];
    /**
     * The item used to select the area.
     */
    item: string;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player doing the selection.
     */
    player_index: uint;
    /**
     * The surface selected.
     */
    surface: LuaSurface;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The tiles selected.
     */
    tiles: LuaTile[];
}
/**
 * Called after a player alt-selects an area with a selection-tool item.
 */
interface on_player_alt_selected_area {
    /**
     * The area selected.
     */
    area: BoundingBox;
    /**
     * The entities selected.
     */
    entities: LuaEntity[];
    /**
     * The item used to select the area.
     */
    item: string;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player doing the selection.
     */
    player_index: uint;
    /**
     * The item quality used to select the area.
     */
    quality: string;
    /**
     * The surface selected.
     */
    surface: LuaSurface;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The tiles selected.
     */
    tiles: LuaTile[];
}
/**
 * Called after a players ammo inventory changed in some way.
 */
interface on_player_ammo_inventory_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a players armor inventory changed in some way.
 */
interface on_player_armor_inventory_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player is banned.
 */
interface on_player_banned {
    /**
     * The player that did the banning if any.
     */
    by_player?: uint;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player banned.
     */
    player_index?: uint;
    /**
     * The banned player name.
     */
    player_name: string;
    /**
     * The reason given if any.
     */
    reason?: string;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player builds tiles.
 */
interface on_player_built_tile {
    /**
     * The inventory containing the items used to build the tiles.
     */
    inventory?: LuaInventory;
    /**
     * The item type used to build the tiles
     */
    item?: LuaItemPrototype;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * The quality of the item used to build the tiles
     */
    quality?: LuaQualityPrototype;
    /**
     * The surface the tile(s) were built on.
     */
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The tile prototype that was placed.
     */
    tile: LuaTilePrototype;
    /**
     * The position data.
     */
    tiles: OldTileAndPosition[];
}
/**
 * Called when a player cancels crafting.
 */
interface on_player_cancelled_crafting {
    /**
     * The number of crafts that have been cancelled.
     */
    cancel_count: uint;
    /**
     * The crafting items returned to the player's inventory.
     */
    items: LuaInventory;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player that did the crafting.
     */
    player_index: uint;
    /**
     * The recipe that has been cancelled.
     */
    recipe: LuaRecipe;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player changes forces.
 */
interface on_player_changed_force {
    /**
     * The old force.
     */
    force: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who changed forces.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the tile position a player is located at changes.
 */
interface on_player_changed_position {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player changes surfaces.
 */
interface on_player_changed_surface {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who changed surfaces.
     */
    player_index: uint;
    /**
     * The surface index the player was on - may be `nil` if the surface no longer exists.
     */
    surface_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when cheat mode is disabled on a player.
 */
interface on_player_cheat_mode_disabled {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when cheat mode is enabled on a player.
 */
interface on_player_cheat_mode_enabled {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player clicks a gps tag
 */
interface on_player_clicked_gps_tag {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Index of the player
     */
    player_index: uint;
    /**
     * Map position contained in gps tag
     */
    position: MapPosition;
    /**
     * Surface name contained in gps tag, even when such surface does not exists
     */
    surface: string;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player clicks the "confirm" button in the configure Blueprint GUI.
 */
interface on_player_configured_blueprint {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player changes controller types.
 */
interface on_player_controller_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The old controller type.
     */
    old_type: defines.controllers;
    /**
     * The player who changed controllers.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the player finishes crafting an item. This event fires just before the results are inserted into the player's inventory, not when the crafting is queued (see {@link on_pre_player_crafted_item | runtime:on_pre_player_crafted_item}).
 */
interface on_player_crafted_item {
    /**
     * The item that has been crafted.
     */
    item_stack: LuaItemStack;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player doing the crafting.
     */
    player_index: uint;
    /**
     * The recipe used to craft this item.
     */
    recipe: LuaRecipe;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after the player was created.
 */
interface on_player_created {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player's {@link cursor stack | runtime:LuaControl::cursor_stack} changed in some way.
 *
 * This is fired in the same tick that the change happens, but not instantly.
 */
interface on_player_cursor_stack_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player selects an area with a deconstruction planner.
 */
interface on_player_deconstructed_area {
    /**
     * If normal selection or alt selection was used.
     */
    alt: boolean;
    /**
     * The area selected.
     */
    area: BoundingBox;
    /**
     * The item used to select the area.
     */
    item: string;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player doing the selection.
     */
    player_index: uint;
    /**
     * The item quality used to select the area.
     */
    quality: string;
    /**
     * The item stack used to select the area.
     */
    stack?: LuaItemStack;
    /**
     * The surface selected.
     */
    surface: LuaSurface;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player is demoted.
 */
interface on_player_demoted {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player dies.
 */
interface on_player_died {
    cause?: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the display density scale changes for a given player. The display density scale is the scale value automatically applied based on the player's display DPI. This is only relevant on platforms that support high-density displays.
 */
interface on_player_display_density_scale_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The old display scale
     */
    old_scale: double;
    /**
     * The player
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the display resolution changes for a given player.
 */
interface on_player_display_resolution_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The old display resolution
     */
    old_resolution: DisplayResolution;
    /**
     * The player
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the display scale changes for a given player.
 */
interface on_player_display_scale_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The old display scale
     */
    old_scale: double;
    /**
     * The player
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the player's driving state has changed, meaning a player has either entered or left a vehicle.
 *
 * This event is not raised when the player is ejected from a vehicle due to it being destroyed.
 */
interface on_player_driving_changed_state {
    /**
     * The vehicle if any.
     */
    entity?: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player drops an item on the ground.
 */
interface on_player_dropped_item {
    /**
     * The item-on-ground entity.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player fast-transfers something to or from an entity.
 */
interface on_player_fast_transferred {
    /**
     * The entity transferred from or to.
     */
    entity: LuaEntity;
    /**
     * Whether the transfer was from player to entity. If `false`, the transfer was from entity to player.
     */
    from_player: boolean;
    /**
     * Whether the transfer was a split action (half stack).
     */
    is_split: boolean;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player transferred from or to.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the player flips an entity. This event is only fired when the entity actually changes its orientation or mirroring, so it won't be triggered when pressing the flip keys on an entity that can't be flipped.
 *
 * This event reflects a change in the {@link LuaEntity::mirroring | runtime:LuaEntity::mirroring} property.
 */
interface on_player_flipped_entity {
    /**
     * The flipped entity.
     */
    entity: LuaEntity;
    /**
     * The enacted flip. `true` means a horizontal flip, `false` a vertical one.
     */
    horizontal: boolean;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after player flushed fluid
 */
interface on_player_flushed_fluid {
    /**
     * Amount of fluid that was removed
     */
    amount: double;
    /**
     * Entity from which flush was performed
     */
    entity: LuaEntity;
    /**
     * Name of a fluid that was flushed
     */
    fluid: string;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * True if flush was requested only on this entity
     */
    only_this_entity: boolean;
    /**
     * Index of the player
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a players gun inventory changed in some way.
 */
interface on_player_gun_inventory_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player's input method changes. See {@link LuaPlayer::input_method | runtime:LuaPlayer::input_method}.
 */
interface on_player_input_method_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player whose input method changed.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player joins the game. This is not called when loading a save file in singleplayer, as the player doesn't actually leave the game, and the save is just on pause until they rejoin.
 */
interface on_player_joined_game {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player is kicked.
 */
interface on_player_kicked {
    /**
     * The player that did the kicking if any.
     */
    by_player?: uint;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player kicked.
     */
    player_index: uint;
    /**
     * The reason given if any.
     */
    reason?: string;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player leaves the game. This is not called when closing a save file in singleplayer, as the player doesn't actually leave the game, and the save is just on pause until they rejoin.
 */
interface on_player_left_game {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    reason: defines.disconnect_reason;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player's active locale changes. See {@link LuaPlayer::locale | runtime:LuaPlayer::locale}.
 */
interface on_player_locale_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The previously active locale.
     */
    old_locale: string;
    /**
     * The player whose locale was changed.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a players main inventory changed in some way.
 */
interface on_player_main_inventory_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after the results of an entity being mined are collected just before the entity is destroyed.
 *
 * After this event any items in the buffer will be transferred into the player as if they came from mining the entity.
 *
 * The buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.
 */
interface on_player_mined_entity {
    /**
     * The temporary inventory that holds the result of mining the entity.
     */
    buffer: LuaInventory;
    /**
     * The entity that has been mined.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The index of the player doing the mining.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the player mines something.
 */
interface on_player_mined_item {
    /**
     * The item given to the player
     */
    item_stack: SimpleItemStack;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player mines tiles.
 */
interface on_player_mined_tile {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * The surface the tile(s) were mined from.
     */
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The position data.
     */
    tiles: OldTileAndPosition[];
}
/**
 * Called when a player is muted.
 */
interface on_player_muted {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player invokes the "smart pipette" over an entity.
 */
interface on_player_pipette {
    /**
     * The item put in the cursor
     */
    item: LuaItemPrototype;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player
     */
    player_index: uint;
    /**
     * The item quality put in the cursor
     */
    quality: LuaQualityPrototype;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * If cheat mode was used to give a free stack of the item.
     */
    used_cheat_mode: boolean;
}
/**
 * Called after the player puts equipment in an equipment grid
 */
interface on_player_placed_equipment {
    /**
     * The equipment put in the equipment grid.
     */
    equipment: LuaEquipment;
    /**
     * The equipment grid the equipment was put in.
     */
    grid: LuaEquipmentGrid;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player is promoted.
 */
interface on_player_promoted {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player is removed (deleted) from the game. This is markedly different from a player temporarily {@link leaving | runtime:on_player_left_game} the game, and instead behaves like the player never existed in the save file.
 */
interface on_player_removed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The index of the removed player.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after the player removes equipment from an equipment grid
 */
interface on_player_removed_equipment {
    /**
     * The count of equipment removed.
     */
    count: uint;
    /**
     * The equipment removed.
     */
    equipment: string;
    /**
     * The equipment grid removed from.
     */
    grid: LuaEquipmentGrid;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * The equipment quality.
     */
    quality: string;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player repairs an entity.
 */
interface on_player_repaired_entity {
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player respawns.
 */
interface on_player_respawned {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * The player port used to respawn if one was used.
     */
    player_port?: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player reverse-selects an area with a selection-tool item.
 */
interface on_player_reverse_selected_area {
    /**
     * The area selected.
     */
    area: BoundingBox;
    /**
     * The entities selected.
     */
    entities: LuaEntity[];
    /**
     * The item used to select the area.
     */
    item: string;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player doing the selection.
     */
    player_index: uint;
    /**
     * The surface selected.
     */
    surface: LuaSurface;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The tiles selected.
     */
    tiles: LuaTile[];
}
/**
 * Called when the player rotates an entity. This event is only fired when the entity actually changes its orientation -- pressing the rotate key on an entity that can't be rotated won't fire this event.
 *
 * Entities being flipped will not fire this event, even if the flip involves rotating. See {@link on_player_flipped_entity | runtime:on_player_flipped_entity}.
 */
interface on_player_rotated_entity {
    /**
     * The rotated entity.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * The previous direction
     */
    previous_direction: defines.direction;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a player selects an area with a selection-tool item.
 */
interface on_player_selected_area {
    /**
     * The area selected.
     */
    area: BoundingBox;
    /**
     * The entities selected.
     */
    entities: LuaEntity[];
    /**
     * The item used to select the area.
     */
    item: string;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player doing the selection.
     */
    player_index: uint;
    /**
     * The item quality used to select the area.
     */
    quality: string;
    /**
     * The surface selected.
     */
    surface: LuaSurface;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The tiles selected.
     */
    tiles: LuaTile[];
}
/**
 * Called when a player sets a quickbar slot to anything (new value, or set to empty).
 */
interface on_player_set_quick_bar_slot {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player selects an area with a blueprint.
 */
interface on_player_setup_blueprint {
    /**
     * If normal selection or alt selection was used.
     */
    alt: boolean;
    /**
     * The area selected.
     */
    area: BoundingBox;
    /**
     * The item used to select the area.
     */
    item: string;
    /**
     * The blueprint entity index to source entity mapping. Note: if any mod changes the blueprint this will be incorrect.
     */
    mapping: LuaLazyLoadedValue<Record<uint, LuaEntity>>;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player doing the selection.
     */
    player_index: uint;
    /**
     * The item quality used to select the area.
     */
    quality: string;
    /**
     * The item stack used to select the area.
     */
    stack?: LuaItemStack;
    /**
     * The surface selected.
     */
    surface: LuaSurface;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player toggles alt mode, also known as "show entity info".
 */
interface on_player_toggled_alt_mode {
    /**
     * The new alt mode value. This value is a shortcut for accessing {@link GameViewSettings::show_entity_info | runtime:GameViewSettings::show_entity_info} on the player.
     */
    alt_mode: boolean;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player toggles the map editor on or off.
 */
interface on_player_toggled_map_editor {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a players trash inventory changed in some way.
 */
interface on_player_trash_inventory_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player is un-banned.
 */
interface on_player_unbanned {
    /**
     * The player that did the un-banning if any.
     */
    by_player?: uint;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player un-banned.
     */
    player_index?: uint;
    /**
     * The player name un-banned.
     */
    player_name: string;
    /**
     * The reason the player was banned if any.
     */
    reason?: string;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player is unmuted.
 */
interface on_player_unmuted {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player uses a capsule that results in some game action.
 */
interface on_player_used_capsule {
    /**
     * The capsule item used.
     */
    item: LuaItemPrototype;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player.
     */
    player_index: uint;
    /**
     * The position the capsule was used.
     */
    position: MapPosition;
    /**
     * The quality of the capsule item used.
     */
    quality: LuaQualityPrototype;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player uses spidertron remote to send all selected units to a given position
 */
interface on_player_used_spidertron_remote {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player that used the remote.
     */
    player_index: uint;
    /**
     * Goal position to which spidertron was sent to.
     */
    position: MapPosition;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after an entity dies.
 */
interface on_post_entity_died {
    /**
     * The corpses created by the entity dying if any.
     */
    corpses: LuaEntity[];
    /**
     * The damage type if any.
     */
    damage_type?: LuaDamagePrototype;
    /**
     * The force that did the killing if any.
     */
    force?: LuaForce;
    /**
     * The ghost created by the entity dying if any.
     */
    ghost?: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Position where the entity died.
     */
    position: MapPosition;
    /**
     * The entity prototype of the entity that died.
     */
    prototype: LuaEntityPrototype;
    /**
     * The quality of the entity that died.
     */
    quality: LuaQualityPrototype;
    /**
     * The surface the entity was on.
     */
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The unit number the entity had if any.
     */
    unit_number?: uint;
}
/**
 * Called when players uses an item to build something. Called before {@link on_built_entity | runtime:on_built_entity}.
 */
interface on_pre_build {
    /**
     * Build mode the item was placed with.
     */
    build_mode: defines.build_mode;
    /**
     * Whether the item was placed while moving.
     */
    created_by_moving: boolean;
    /**
     * The direction the item was facing when placed.
     */
    direction: defines.direction;
    /**
     * Whether the blueprint was flipped horizontally. `nil` if not built by a blueprint.
     */
    flip_horizontal: boolean;
    /**
     * Whether the blueprint was flipped vertically. `nil` if not built by a blueprint.
     */
    flip_vertical: boolean;
    /**
     * If the item is mirrored (only crafting machines support this)
     */
    mirror: boolean;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who did the placing.
     */
    player_index: uint;
    /**
     * Where the item was placed.
     */
    position: MapPosition;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called before one or more chunks are deleted using {@link LuaSurface::delete_chunk | runtime:LuaSurface::delete_chunk}.
 */
interface on_pre_chunk_deleted {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The chunks to be deleted.
     */
    positions: ChunkPosition[];
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called before entity copy-paste is done.
 */
interface on_pre_entity_settings_pasted {
    /**
     * The destination entity settings will be copied to.
     */
    destination: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * The source entity settings will be copied from.
     */
    source: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called before a ghost entity is destroyed as a result of being marked for deconstruction.
 *
 * Also called for item request proxies before they are destroyed as a result of being marked for deconstruction.
 */
interface on_pre_ghost_deconstructed {
    ghost: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player that did the deconstruction if any.
     */
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called before a ghost entity is upgraded.
 */
interface on_pre_ghost_upgraded {
    ghost: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player that did the upgrade if any.
     */
    player_index?: uint;
    quality: LuaQualityPrototype;
    target: LuaEntityPrototype;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called directly before a permission group is deleted.
 */
interface on_pre_permission_group_deleted {
    /**
     * The group to be deleted.
     */
    group: LuaPermissionGroup;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player doing the deletion or `nil` if by a mod.
     */
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called directly before a permission string is imported.
 */
interface on_pre_permission_string_imported {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player importing the string.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a player queues something to be crafted.
 */
interface on_pre_player_crafted_item {
    /**
     * The items removed from the players inventory to do the crafting.
     */
    items: LuaInventory;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player doing the crafting.
     */
    player_index: uint;
    /**
     * The number of times the recipe is being queued.
     */
    queued_count: uint;
    /**
     * The recipe being queued.
     */
    recipe: LuaRecipe;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called before a players dies.
 */
interface on_pre_player_died {
    cause?: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called before a player leaves the game.
 */
interface on_pre_player_left_game {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    reason: defines.disconnect_reason;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the player completes a mining action, but before the entity is potentially removed from the map. This is called even if the entity does not end up being removed.
 */
interface on_pre_player_mined_item {
    /**
     * The entity being mined
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called before a player is removed (deleted) from the game. This is markedly different from a player temporarily {@link leaving | runtime:on_player_left_game} the game, and instead behaves like the player never existed in the save file.
 */
interface on_pre_player_removed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The index of the removed player.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called before a player toggles the map editor on or off.
 */
interface on_pre_player_toggled_map_editor {
    /**
     * Identifier of the event
     */
    name: defines.events;
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called directly before a robot explodes cliffs.
 */
interface on_pre_robot_exploded_cliff {
    cliff: LuaEntity;
    /**
     * The cliff explosive used.
     */
    item: LuaItemPrototype;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The quality of the cliff explosive used.
     */
    quality: LuaQualityPrototype;
    robot: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called just before the scenario finishes.
 */
interface on_pre_scenario_finished {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * If a player won
     */
    player_won: boolean;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called just before a script inventory is resized.
 */
interface on_pre_script_inventory_resized {
    inventory: LuaInventory;
    /**
     * The mod that did the resizing. This will be `"core"` if done by console command or scenario script.
     */
    mod: string;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The new inventory size.
     */
    new_size: uint;
    /**
     * The old inventory size.
     */
    old_size: uint;
    /**
     * If done by console command; the player who ran the command.
     */
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called just before a surface is cleared (all entities removed and all chunks deleted).
 */
interface on_pre_surface_cleared {
    /**
     * Identifier of the event
     */
    name: defines.events;
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called just before a surface is deleted.
 */
interface on_pre_surface_deleted {
    /**
     * Identifier of the event
     */
    name: defines.events;
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the player triggers "redo".
 */
interface on_redo_applied {
    /**
     * The context of the redo action.
     */
    actions: UndoRedoAction[];
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who triggered the redo action.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when research is cancelled.
 */
interface on_research_cancelled {
    /**
     * The force whose research was cancelled.
     */
    force: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * A mapping of technology name to how many times it was cancelled.
     */
    research: Record<string, uint>;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a research finishes.
 */
interface on_research_finished {
    /**
     * If the technology was researched by script.
     */
    by_script: boolean;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The researched technology
     */
    research: LuaTechnology;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when research is moved forwards or backwards in the research queue.
 */
interface on_research_moved {
    /**
     * The force whose research was re-arranged.
     */
    force: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a research is reversed (unresearched).
 */
interface on_research_reversed {
    /**
     * If the technology was un-researched by script.
     */
    by_script: boolean;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The technology un-researched
     */
    research: LuaTechnology;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a technology research starts.
 */
interface on_research_started {
    last_research?: LuaTechnology;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The technology being researched
     */
    research: LuaTechnology;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a resource entity reaches 0 or its minimum yield for infinite resources.
 */
interface on_resource_depleted {
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a construction robot builds an entity.
 */
interface on_robot_built_entity {
    /**
     * The entity built.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The robot that did the building.
     */
    robot: LuaEntity;
    /**
     * The item used to do the building.
     */
    stack: LuaItemStack;
    /**
     * The tags associated with this entity if any.
     */
    tags?: Tags;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a robot builds tiles.
 */
interface on_robot_built_tile {
    /**
     * The inventory containing the stacks used to build the tiles.
     */
    inventory: LuaInventory;
    /**
     * The item type used to build the tiles.
     */
    item: LuaItemPrototype;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The quality the item used to build the tiles.
     */
    quality: LuaQualityPrototype;
    /**
     * The robot.
     */
    robot: LuaEntity;
    /**
     * The surface the tile(s) are build on.
     */
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The tile prototype that was placed.
     */
    tile: LuaTilePrototype;
    /**
     * The position data.
     */
    tiles: OldTileAndPosition[];
}
/**
 * Called directly after a robot explodes cliffs.
 */
interface on_robot_exploded_cliff {
    /**
     * The cliff explosive used.
     */
    item: LuaItemPrototype;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The quality of the cliff explosive used.
     */
    quality: LuaQualityPrototype;
    robot: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a robot mines an entity.
 */
interface on_robot_mined {
    /**
     * The entity the robot just picked up.
     */
    item_stack: SimpleItemStack;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The robot that did the mining.
     */
    robot: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after the results of an entity being mined are collected just before the entity is destroyed.
 *
 * After this event any items in the buffer will be transferred into the robot as if they came from mining the entity.
 *
 * The buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.
 */
interface on_robot_mined_entity {
    /**
     * The temporary inventory that holds the result of mining the entity.
     */
    buffer: LuaInventory;
    /**
     * The entity that has been mined.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The robot doing the mining.
     */
    robot: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a robot mines tiles.
 */
interface on_robot_mined_tile {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The robot.
     */
    robot: LuaEntity;
    /**
     * The surface the tile(s) were mined on.
     */
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The position data.
     */
    tiles: OldTileAndPosition[];
}
/**
 * Called before a robot mines an entity.
 */
interface on_robot_pre_mined {
    /**
     * The entity which is about to be mined.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The robot that's about to do the mining.
     */
    robot: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a rocket silo is ordered to be launched.
 */
interface on_rocket_launch_ordered {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player that is riding the rocket, if any.
     */
    player_index?: uint;
    rocket: LuaEntity;
    rocket_silo: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a rocket finishes ascending. (Triggers listening for finished rocket launch past 2.0 have been moved to 'on_cargo_pod_finished_ascending' as rocket and cargo pod are two separate entities)
 */
interface on_rocket_launched {
    /**
     * Identifier of the event
     */
    name: defines.events;
    rocket: LuaEntity;
    rocket_silo?: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a runtime mod setting is changed by a player.
 */
interface on_runtime_mod_setting_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * If the `setting_type` is `"global"` and it was changed through the mod settings GUI, this is the index of the player that changed the global setting. If the `setting_type` is `"runtime-per-user"` and it changed a current setting of the player, this is the index of the player whose setting was changed. In all other cases, this is `nil`.
     */
    player_index?: uint;
    /**
     * The prototype name of the setting that was changed.
     */
    setting: string;
    setting_type: 'runtime-global' | 'runtime-per-user';
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called just after a script inventory is resized.
 */
interface on_script_inventory_resized {
    inventory: LuaInventory;
    /**
     * The mod that did the resizing. This will be `"core"` if done by console command or scenario script.
     */
    mod: string;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The new inventory size.
     */
    new_size: uint;
    /**
     * The old inventory size.
     */
    old_size: uint;
    /**
     * Any items which didn't fit into the new inventory size.
     */
    overflow_inventory: LuaInventory;
    /**
     * If done by console command; the player who ran the command.
     */
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a {@link LuaSurface::request_path | runtime:LuaSurface::request_path} call completes.
 */
interface on_script_path_request_finished {
    /**
     * Handle to associate the callback with a particular call to {@link LuaSurface::request_path | runtime:LuaSurface::request_path}.
     */
    id: uint;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The actual path that the pathfinder has determined. `nil` if pathfinding failed.
     */
    path?: PathfinderWaypoint[];
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * Indicates that the pathfinder failed because it is too busy, and that you can retry later.
     */
    try_again_later: boolean;
}
/**
 * Called when a script trigger effect is triggered.
 */
interface on_script_trigger_effect {
    /**
     * The entity that originally caused the sequence of triggers
     */
    cause_entity?: LuaEntity;
    /**
     * The effect_id specified in the trigger effect.
     */
    effect_id: string;
    /**
     * Identifier of the event
     */
    name: defines.events;
    source_entity?: LuaEntity;
    source_position?: MapPosition;
    /**
     * The surface the effect happened on.
     */
    surface_index: uint;
    target_entity?: LuaEntity;
    target_position?: MapPosition;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when an entity of type `radar` finishes scanning a sector.
 */
interface on_sector_scanned {
    /**
     * Area of the scanned chunk.
     */
    area: BoundingBox;
    /**
     * The chunk scanned.
     */
    chunk_position: ChunkPosition;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The radar that did the scanning.
     */
    radar: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when an individual segment of a SegmentedUnit is created.
 */
interface on_segment_entity_created {
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after the selected entity changes for a given player.
 */
interface on_selected_entity_changed {
    /**
     * The last selected entity if it still exists and there was one.
     */
    last_entity?: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player whose selected entity changed.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a space platform builds an entity.
 */
interface on_space_platform_built_entity {
    /**
     * The entity built.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The platform that did the building.
     */
    platform: LuaSpacePlatform;
    /**
     * The item used to do the building.
     */
    stack: LuaItemStack;
    /**
     * The tags associated with this entity if any.
     */
    tags?: Tags;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a space platform builds tiles.
 */
interface on_space_platform_built_tile {
    /**
     * The inventory containing the stacks used to build the tiles.
     */
    inventory: LuaInventory;
    /**
     * The item type used to build the tiles.
     */
    item: LuaItemPrototype;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The platform.
     */
    platform: LuaSpacePlatform;
    /**
     * The quality the item used to build the tiles.
     */
    quality: LuaQualityPrototype;
    /**
     * The surface the tile(s) are build on.
     */
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The tile prototype that was placed.
     */
    tile: LuaTilePrototype;
    /**
     * The position data.
     */
    tiles: OldTileAndPosition[];
}
/**
 * Called when a space platform changes state
 */
interface on_space_platform_changed_state {
    /**
     * Identifier of the event
     */
    name: defines.events;
    old_state: defines.space_platform_state;
    platform: LuaSpacePlatform;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after the results of an entity being mined are collected just before the entity is destroyed.
 *
 * After this event any items in the buffer will be transferred into the platform as if they came from mining the entity.
 *
 * The buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.
 */
interface on_space_platform_mined_entity {
    /**
     * The temporary inventory that holds the result of mining the entity.
     */
    buffer: LuaInventory;
    /**
     * The entity that has been mined.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The platform doing the mining.
     */
    platform: LuaSpacePlatform;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a platform mines an entity.
 */
interface on_space_platform_mined_item {
    /**
     * The entity the platform just picked up.
     */
    item_stack: SimpleItemStack;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The platform that did the mining.
     */
    platform: LuaSpacePlatform;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a platform mines tiles.
 */
interface on_space_platform_mined_tile {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The platform.
     */
    platform: LuaSpacePlatform;
    /**
     * The surface the tile(s) were mined on.
     */
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The position data.
     */
    tiles: OldTileAndPosition[];
}
/**
 * Called before a platform mines an entity.
 */
interface on_space_platform_pre_mined {
    /**
     * The entity which is about to be mined.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The platform that's about to do the mining.
     */
    platform: LuaSpacePlatform;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a spider finishes moving to its autopilot position.
 */
interface on_spider_command_completed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * Spider vehicle which was requested to move.
     */
    vehicle: LuaEntity;
}
/**
 * Called when a translation request generated through {@link LuaPlayer::request_translation | runtime:LuaPlayer::request_translation} or {@link LuaPlayer::request_translations | runtime:LuaPlayer::request_translations} has been completed.
 */
interface on_string_translated {
    /**
     * The unique id for this translation request.
     */
    id: uint;
    /**
     * The localised string being translated.
     */
    localised_string: LocalisedString;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player whose locale was used for the translation.
     */
    player_index: uint;
    /**
     * The translated `localised_string`.
     */
    result: string;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * Whether the requested localised string was valid and could be translated.
     */
    translated: boolean;
}
/**
 * Called just after a surface is cleared (all entities removed and all chunks deleted).
 */
interface on_surface_cleared {
    /**
     * Identifier of the event
     */
    name: defines.events;
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a surface is created.
 *
 * This is not called when the default surface is created as it will always exist.
 */
interface on_surface_created {
    /**
     * Identifier of the event
     */
    name: defines.events;
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a surface is deleted.
 */
interface on_surface_deleted {
    /**
     * Identifier of the event
     */
    name: defines.events;
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called after a surface is imported via the map editor.
 */
interface on_surface_imported {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The original surface name.
     */
    original_name: string;
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a surface is renamed.
 */
interface on_surface_renamed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    new_name: string;
    old_name: string;
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when {@link LuaForce::reset_technology_effects | runtime:LuaForce::reset_technology_effects} is finished.
 */
interface on_technology_effects_reset {
    force: LuaForce;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * It is fired once every tick. Since this event is fired every tick, its handler shouldn't include performance heavy code.
 */
interface on_tick {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a train changes state (started to stopped and vice versa)
 */
interface on_train_changed_state {
    /**
     * Identifier of the event
     */
    name: defines.events;
    old_state: defines.train_state;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    train: LuaTrain;
}
/**
 * Called when a new train is created either through disconnecting/connecting an existing one or building a new one.
 */
interface on_train_created {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The first old train id when splitting/merging trains.
     */
    old_train_id_1?: uint;
    /**
     * The second old train id when splitting/merging trains.
     */
    old_train_id_2?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    train: LuaTrain;
}
/**
 * Called when a trains schedule is changed either by the player or through script.
 */
interface on_train_schedule_changed {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who made the change if any.
     */
    player_index?: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    train: LuaTrain;
}
/**
 * Called when an entity with a trigger prototype (such as capsules) create an entity AND that trigger prototype defined `trigger_created_entity=true`.
 */
interface on_trigger_created_entity {
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    source?: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when an entity with a trigger prototype (such as capsules) fire an artillery projectile AND that trigger prototype defined `trigger_fired_artillery=true`.
 */
interface on_trigger_fired_artillery {
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    source?: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when the player triggers "undo".
 */
interface on_undo_applied {
    /**
     * The context of the undo action.
     */
    actions: UndoRedoAction[];
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The player who triggered the undo action.
     */
    player_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a unit is added to a unit group.
 */
interface on_unit_added_to_group {
    group: LuaCommandable;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    unit: LuaEntity;
}
/**
 * Called when a new unit group is created, before any members are added to it.
 */
interface on_unit_group_created {
    group: LuaCommandable;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a unit group finishes gathering and starts executing its command.
 */
interface on_unit_group_finished_gathering {
    group: LuaCommandable;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * Called when a unit is removed from a unit group.
 */
interface on_unit_removed_from_group {
    group: LuaCommandable;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    unit: LuaEntity;
}
/**
 * Called when a worker (construction or logistic) robot expires through a lack of energy.
 */
interface on_worker_robot_expired {
    /**
     * Identifier of the event
     */
    name: defines.events;
    robot: LuaEntity;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * A static event mods can use to tell other mods they built something by script. This event is only raised if a mod does so with {@link LuaBootstrap::raise_event | runtime:LuaBootstrap::raise_event} or {@link LuaBootstrap::raise_script_built | runtime:LuaBootstrap::raise_script_built}, or when `raise_built` is passed to {@link LuaSurface::create_entity | runtime:LuaSurface::create_entity}.
 */
interface script_raised_built {
    /**
     * The entity that has been built.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * A static event mods can use to tell other mods they destroyed something by script. This event is only raised if a mod does so with {@link LuaBootstrap::raise_event | runtime:LuaBootstrap::raise_event} or {@link LuaBootstrap::raise_script_destroy | runtime:LuaBootstrap::raise_script_destroy}, or when `raise_destroy` is passed to {@link LuaEntity::destroy | runtime:LuaEntity::destroy}.
 */
interface script_raised_destroy {
    /**
     * The entity that was destroyed.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * A static event mods can use to tell other mods they revived something by script. This event is only raised if a mod does so with {@link LuaBootstrap::raise_event | runtime:LuaBootstrap::raise_event} or {@link LuaBootstrap::raise_script_revive | runtime:LuaBootstrap::raise_script_revive}, or when `raise_revive` is passed to {@link LuaEntity::revive | runtime:LuaEntity::revive}.
 */
interface script_raised_revive {
    /**
     * The entity that was revived.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The tags associated with this entity, if any.
     */
    tags?: Tags;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}
/**
 * A static event mods can use to tell other mods they changed tiles on a surface by script. This event is only raised if a mod does so with {@link LuaBootstrap::raise_event | runtime:LuaBootstrap::raise_event} or {@link LuaBootstrap::raise_script_set_tiles | runtime:LuaBootstrap::raise_script_set_tiles}, or when `raise_event` is passed to {@link LuaSurface::set_tiles | runtime:LuaSurface::set_tiles}.
 */
interface script_raised_set_tiles {
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The surface whose tiles were changed.
     */
    surface_index: uint;
    /**
     * Tick the event was generated.
     */
    tick: uint;
    /**
     * The tiles that were changed.
     */
    tiles: Tile[];
}
/**
 * A static event mods can use to tell other mods they teleported something by script. This event is only raised if a mod does so with {@link LuaBootstrap::raise_event | runtime:LuaBootstrap::raise_event} or {@link LuaBootstrap::raise_script_teleported | runtime:LuaBootstrap::raise_script_teleported}, or when `raise_teleported` is passed to {@link LuaControl::teleport | runtime:LuaControl::teleport}.
 */
interface script_raised_teleported {
    /**
     * The entity that was teleported.
     */
    entity: LuaEntity;
    /**
     * Identifier of the event
     */
    name: defines.events;
    /**
     * The entity's position before the teleportation.
     */
    old_position: MapPosition;
    /**
     * The entity's surface before the teleportation.
     */
    old_surface_index: uint8;
    /**
     * Tick the event was generated.
     */
    tick: uint;
}

}